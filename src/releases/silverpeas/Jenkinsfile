/*
 * This pipeline requires the following build parameter to be set:
 * BUILD_VERSION: the version number of an existing Silverpeas build from which the release will be performed
 */
node {
  catchError {
    def nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def wildflyVersion = '10.1.0'
    def version
    docker.image("silverpeas/silverbuild")
        .inside('-u root -v $HOME/.m2/settings.xml:/root/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/root/.m2/settings-security.xml -v $HOME/.gitconfig:/root/.gitconfig -v $HOME/.ssh:/root/.ssh -v $HOME/.gnupg:/root/.gnupg') {
      stage('Preparation') {
        version = getVersionNumber(params.BUILD_VERSION)
        echo "Prepare the release of Silverpeas ${version}..."

      }
      stage('Silverpeas Core') {
        echo "Release Silverpeas Core ${version}..."
        def project = 'Silverpeas-Core'
        def commit =
            getCommitHash("${nexusRepo}/org/silverpeas/core/silverpeas-core-api/${params.BUILD_VERSION}/silverpeas-core-api-${params.BUILD_VERSION}.jar")
        fetchFromGithub(project)
        releaseProject(project, commit, version)
        prepareNextSnapshotVersion(project, commit, version)
      }
      stage('Silverpeas Components') {
        echo "Release Silverpeas Components ${version}..."
        def project = 'Silverpeas-Components'
        def commit =
            getCommitHash("${nexusRepo}/org/silverpeas/components/kmelia/silverpeas-kmelia/${params.BUILD_VERSION}/silverpeas-kmelia-${params.BUILD_VERSION}.jar")
        fetchFromGithub(project)
        releaseProject(project, commit, version)
        prepareNextSnapshotVersion(project, commit, version)
      }
      stage('Silverpeas Assembly') {
        echo "Release Silverpeas Assembly ${version}..."
        def project = 'Silverpeas-Assembly'
        fetchFromGithub(project)

        sh """
git checkout -b pre-release-${version}
curl -fsSL -o pom.xml ${nexusRepo}/org/silverpeas/silverpeas-assembly/${
          params.BUILD_VERSION
        }/silverpeas-assembly-${params.BUILD_VERSION}.pom
git commit -am "Prepare the release of ${version}"
"""
        // release the project
        def pom = readMavenPom()
        if (pom.properties['jackrabbit.version'].contains('build') || pom.properties['jackrabbit.version'].contains('SNAPSHOT')) {
          error("The Jackrabbit JCA dependency must be a stable version for this project to be released. Current version is ${pom.properties['jackrabbit.version']}")
        }
        releaseProject(project, "pre-release-${version}", version)
        prepareNextSnapshotVersion(project, 'master', version)
      }
      stage('Silverpeas Setup') {
        echo "Release Silverpeas Setup ${version}..."
        def project = 'Silverpeas-Setup'
        def commit =
            getCommitHash("${nexusRepo}/org/silverpeas/silverpeas-setup/${params.BUILD_VERSION}/silverpeas-setup-${params.BUILD_VERSION}.jar")
        fetchFromGithub(project)
        releaseProject(project, commit, version)
        prepareNextSnapshotVersion(project, commit, version)
      }
      stage('Silverpeas Distribution') {
        echo "Release Silverpeas Distribution ${version}..."
        def project = 'Silverpeas-Distribution'
        def commit = getDistribCommitHash(params.BUILD_VERSION, nexusRepo)
        fetchFromGithub(project)
        releaseProject(project, commit, version)
        prepareNextSnapshotVersion(project, commit, version)
      }
      stage('Silverpeas Looks') {
        echo "Release Silverpeas Looks ${version}..."
        def project = 'Silverpeas-Looks'
        def commit =
            getCommitHash("${nexusRepo}/org/silverpeas/looks/aurora/silverpeas-aurora-configuration/${params.BUILD_VERSION}/silverpeas-aurora-configuration-${params.BUILD_VERSION}.jar")
        fetchFromGithub(project)
        releaseProject(project, commit, version)
        prepareNextSnapshotVersion(project, commit, version)
      }
      stage('Silverpeas Mobile') {
        echo "Release Silverpeas Mobile ${version}..."
        def project = 'silverpeasmobile'
        def commit =
            getCommitHash("${nexusRepo}/org/silverpeas/components/mobile/silverpeas-mobile-configuration/${params.BUILD_VERSION}/silverpeas-mobile-configuration-${params.BUILD_VERSION}.jar")
        fetchFromGithub(project)
        releaseProject(project, commit, version)
        prepareNextSnapshotVersion(project, commit, version)
      }
      stage('Silverpeas Izpack Installer') {
        echo "Generate the Izpack installer for Silverpeas ${version}"
        def project = 'Silverpeas-Izpack-Installer'
        fetchFromGithub(project)
        def branch = getMainBranch(version)
        sh "git checkout ${branch}"
        def pom = readMavenPom()
        if (pom.parent.version.contains('build') || pom.parent.version.contains('SNAPSHOT')) {
          error "The version of parent POM must be a stable version for this project to be released. Current version is ${pom.parent.version}"
        }
        withGit(project) { repo ->
          sh """
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean install
git commit -am "Build and deliver the Izpack installer for Silverpeas ${version}"
git tag ${version}
git push ${repo} HEAD:${branch}
git push ${repo} --tags
"""
          if (!isMinor(version)) {
            sh """
git checkout -b ${version}.x
git commit -am "Prepare branch ${version}.x for minor versions"
git push ${repo} ${version}.x
"""
          }
        }
      }
      stage('Silverpeas Test Docker Image') {
        echo "Generate a Test Docker image of Silverpeas ${version}"
        def project = 'docker-silverpeas-test'
        fetchFromGithub(project)
        withGit(project) { repo ->
          sh """
sed -i -e "s/ARG SILVERPEAS_VERSION=.\\+/ARG SILVERPEAS_VERSION=${version}/g" Dockerfile
sed -i -e "s/build=.\\+/build=1/g" Dockerfile
git commit -am "Update Dockerfile for Silverpeas ${version}"
git tag ${version}
git push ${repo} HEAD:master
git push ${repo} --tags
"""
        }
      }
      stage('Silverpeas Docker Image') {
        echo "Generate a Docker image of Silverpeas ${version}"
        def project = 'docker-silverpeas-prod'
        fetchFromGithub(project)
        withGit(project) { repo ->
          sh """
./generate-dockerfile.sh ${version} ${wildflyVersion}
git commit -am "Generate Dockerfile for Silverpeas ${version}"
git tag ${version}
git push ${repo} HEAD:master
git push ${repo} --tags
./generate-docker-library.sh > silverpeas
"""
        }
        stash includes: 'silverpeas', name: 'docker-library'

        fetchFromGithub('official-images')
        dir('library') {
          unstash 'docker-library'
        }
        withGit('official-images') { repo ->
          sh """
git commit -am "Update Silverpeas Docker image version ${version}"
git push ${repo} HEAD:master
"""
        }
      }
      stage('Publish Project Web Site') {
        echo "Publish the web site with the new build version ${version}..."
        copyArtifacts projectName: 'Silverpeas_Master_AutoDeploy',
            filter: "org/silverpeas/core/*-build*/*.pom",
            flatten: true
        def files = findFiles glob: '*.pom'
        def pom = readMavenPom file: files[0].path
        def lastBuildVersion = pom.version
        fetchFromGithub('Silverpeas-Project-Web-Site')
        sh """
sed -i -e "s/<installer_stable_version>[0-9a-zA-Z.-]\\+/<installer_stable_version>${version}/g" pom.xml
sed -i -e "s/<installer_izpack_version>[0-9a-zA-Z.-]\\+/<installer_izpack_version>${version}/g" pom.xml
sed -i -e "s/<installer_build_version>[0-9a-zA-Z.-]\\+/<installer_build_version>${lastBuildVersion}/g" pom.xml
mvn clean site-deploy
"""
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
        sendToIndividuals: true])
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: false,
        recipients: "nicolas.eysseric@silverpeas.org, david.lesimple@silverpeas.org, sebastien.vuillet@silverpeas.org, aurore.allibe@silverpeas.org",
        sendToIndividuals: true])
}

def fetchFromGithub(project) {
  sh "rm -rf *"
  git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: "https://github.com/Silverpeas/${project}"
}

def withGit(project, closure) {
  withCredentials([usernamePassword(credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59',
      usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
    closure.call("https://${USER}:${PASSWORD}@github.com/Silverpeas/${project}")
  }
}

def buildGradleProject(version) {
  sh """
sed -i -e "s/version = '.\\+'/version = '${version}'/g" build.gradle
./gradlew clean install publish
"""
}

def buildMavenProjectSnapshot(nextVersion) {
  sh """
sed -i -e "s/<silverpeas.version>[0-9a-zA-Z.-]\\+/<silverpeas.version>${nextVersion}-SNAPSHOT/g" pom.xml
sed -i -e "s/<next.release>[0-9.]\\+/<next.release>${nextVersion}/g" pom.xml
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${nextVersion}-SNAPSHOT
mvn clean install -Dmaven.test.skip=true -Pdeployment
"""
}

def buildMavenProjectRelease(version) {
  def pom = readMavenPom()
  if (pom.parent != null && (pom.parent.version.contains('build') || pom.parent.version.contains('SNAPSHOT'))) {
    error "The version of parent POM must be a stable version for this project to be released. Current version is ${pom.parent.version}"
  }
  sh """
sed -i -e "s/<silverpeas.version>[0-9a-zA-Z.-]\\+/<silverpeas.version>${version}/g" pom.xml
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean deploy -Dmaven.test.skip=true -Pdeployment -Prelease-sign-artifacts
"""
}

def createMinorBranchFor(project, version) {
  sh "git checkout -b ${version}.x"
  if (fileExists('pom.xml')) {
    buildMavenProjectSnapshot("${version}.1")
  } else {
    buildGradleProject("${version}.1")
  }
  withGit(project) { repo ->
    sh """
git commit -am "Prepare branch ${version}.x for bug fixes"
git push ${repo} ${version}.x
"""
  }
}

def prepareNextSnapshotVersion(project, commit, version) {
  echo "-> Prepare Next Snapshot version after ${version}"
  def nextversion = getNextVersion(version)
  def mainbranch = getMainBranch(version)
  if (!isMinor(version)) {
    echo "Create bug-fix branch ${version}.x"
    createMinorBranchFor(project, version)
  }

  echo "Prepare the next development iteration for ${nextversion}"
  sh "git checkout ${mainbranch}"
  if (fileExists('pom.xml')) {
    buildMavenProjectSnapshot(nextversion)
  } else {
    buildGradleProject("${nextversion}-SNAPSHOT")
  }
  withGit(project) { repo ->
    sh """
git commit -am "${version} has been released from commit ${commit} (build version ${params.BUILD_VERSION}). Prepare for development iteration of next version ${nextversion}"
git push ${repo} ${mainbranch}
"""
  }
}

def releaseProject(project, commit, version) {
  echo "-> Release project to version ${version}"
  // we first change the Maven repo definition to use the repo dedicated to releases
  // then we release the project and finally we tag it
  sh """
git checkout ${commit}
git checkout -b release-${version}
"""
  if (fileExists('pom.xml')) {
    buildMavenProjectRelease(version)
  } else {
    buildGradleProject(version)
  }
  withGit(project) { repo ->
    sh """
git commit -am "Release of ${version}"
git tag ${version}
git push ${repo} --tags
"""
  }
}

def getCommitHash(artifactUrl) {
  String artifactName = getArtifactName(artifactUrl)
  if (artifactName == null) {
    error "Cannot figure out the artifact referred by ${artifactUrl}"
  }
  sh "curl -fsSL -o ${artifactName} ${artifactUrl}"
  def manifest = readManifest file: "${artifactName}"
  manifest.main['Git-Commit']
}

def getDistribCommitHash(buildVersion, repo) {
  sh """
curl -fsSL -o silverpeas-distribution-${buildVersion}.zip ${repo}/org/silverpeas/silverpeas-distribution/${buildVersion}/silverpeas-distribution-${buildVersion}.zip
unzip -j silverpeas-distribution-${buildVersion}.zip silverpeas*/BUILD
"""
  def buildProps = readProperties file: 'BUILD'
  buildProps['Git-Commit']
}

@NonCPS
def getArtifactName(artifactUrl) {
  def matcher = artifactUrl =~ '^.+/(.+\\.jar)$'
  matcher ? matcher[0][1] : null
}

@NonCPS
def getVersionNumber(buildVersion) {
  def matcher = buildVersion =~ '(.+)-build\\d+'
  matcher ? matcher[0][1] : null
}

@NonCPS
def isMinor(version) {
  (version =~ '\\d+.\\d+.\\d+').matches()
}

@NonCPS
def getNextVersion(version) {
  String[] parts = version.split('\\.')
  parts.length < 3 ? "${parts[0]}.${(parts[1] as Integer) + 1}" : "${parts[0]}.${parts[1]}.${(parts[2] as Integer) + 1}"
}

@NonCPS
def getMainBranch(version) {
  def matcher = version =~ '^(\\d+.\\d+)\\..*$'
  matcher ? "${matcher[0][1]}.x" : 'master'
}
