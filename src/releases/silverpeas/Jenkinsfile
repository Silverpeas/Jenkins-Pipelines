import java.util.regex.Matcher

/**
 * Pipeline to release a stable version of Silverpeas from a given build version. The first step is
 * to figure out the version to release and from which SCM branch the release has to be performed.
 * The pipeline identifies the release of either a patch version from the current stable branch or a
 * major/minor version from the master branch. It takes also in charge the release of a patch
 * version from a previous stable branch other than the current one.
 *
 * Once the release is successfully done, the pipeline triggers extra jobs like the publishing of
 * Docker images for the new version of Silverpeas and the update of the community web site.
 *
 * For doing, this pipeline expects the following environment variables to be set:
 * STABLE_BRANCH     the SCM branch in which the current stable version of the project is currently
 *                   maintained
 * IMAGE_FOR_STABLE  the version of the Docker image to be used by this pipeline for stable version
 *                   of the project.
 *
 * This pipeline requires the following parameters:
 * BUILD_VERSION the build version of Silverpeas from which the release has to be done.
 *
 * The build is performed within a dedicated Docker image in order to ensure the reproducibility of
 * the builds and to containerize them from the host OS.
 */

String imageVersion = getDockerImageVersion()

def projects = [
                core        : 'Silverpeas-Core',
                components  : 'Silverpeas-Components',
                looks       : 'Silverpeas-Looks',
                setup       : 'Silverpeas-Setup',
                distribution: 'Silverpeas-Distribution',
                assembly    : 'Silverpeas-Assembly',
                mobile      : 'silverpeasmobile']

pipeline {

  agent {
    docker {
      image "silverpeas/silverbuild:${imageVersion}"
      args '''
          -v $HOME/.m2/settings.xml:/home/silverbuild/.m2/settings.xml 
          -v $HOME/.m2/settings-security.xml:/home/silverbuild/.m2/settings-security.xml 
          -v $HOME/.gitconfig:/home/silverbuild/.gitconfig 
          -v $HOME/.ssh:/home/silverbuild/.ssh 
          -v $HOME/.gnupg:/home/silverbuild/.gnupg
          '''
    }
  }

  parameters {
    string(
        description: 'The build version of Silverpeas from which the release has to be done',
        name: 'BUILD_VERSION'
    )
  }

  environment {
    gitBaseRepo = 'https://github.com/Silverpeas/'
    gitCredential = 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59'
    mavenRepo = 'https://www.silverpeas.org/nexus/content/repositories/silverpeas'
    branch = getBranch()
    isPatchVersion = branch.endsWith('.x')
    wildflyVersion = ''
    jackrabbitVersion = ''
    nextVersion = ''
    pomParentVersion = ''
    buildToRelease = null
    artifact = 'target/build.yaml'
  }

  stages {

    stage('Prepare the release') {
      steps {
        script {
          sh 'rm -rf target'

          String type = getBranchType()
          copyArtifacts projectName: "Silverpeas_${type}_AutoDeploy", flatten: true,
              selector: specific(params.BUILD_VERSION)
          buildToRelease = readYaml file: 'build.yaml'
          nextVersion = getNextVersion(buildToRelease.release)
          sh 'rm -f build.yaml'

          copyArtifacts projectName: "Silverpeas_Mobile_${type}_AutoDeploy", flatten: true,
              selector: specific(params.BUILD_VERSION)
          def mobileToRelease = readYaml file: 'build.yaml'
          buildToRelease.commits['silverpeasmobile'] = mobileToRelease.commit
          sh 'rm -f build.yaml'

          sh "curl -fsSL -o pom.xml https://raw.githubusercontent.com/Silverpeas/Silverpeas-Assembly/${branch}/pom.xml"
          def pom = readMavenPom()
          jackrabbitVersion = pom.properties['jackrabbit.version']
          sh 'rm -f pom.xml'
        }
      }
    }

    stage('Check the build version can be used for release') {
      when {
        expression { !buildToRelease.tested || !buildToRelease.QA }
      }
      steps {
        error("The build ${buildToRelease.version} cannot be used for the release of ${buildToRelease.release} as it hasn't been tested or no QA has been applied on it!")
      }
    }

    stage('Check Jackrabbit version') {
      when {
        expression {
          jackrabbitVersion.contains('build') || jackrabbitVersion.contains('SNAPSHOT')
        }
      }
      steps {
        error("The Jackrabbit JCA dependency must be at a stable version for this project to be released. Current version is ${jackrabbitVersion}")
      }
    }

    stage ('Check Silverpeas Projects Definition') {
      steps {
        script {
          String parentVersion = buildToRelease.parent
          buildToRelease.releaseParent = parentVersion != null && branch == 'master' &&
              (parentVersion.contains('build') || parentVersion.contains('SNAPSHOT'))
          sh "curl -fsSL -o pom.xml ${mavenRepo}/org/silverpeas/silverpeas-project/${parentVersion}/silverpeas-project-${parentVersion}.pom"
          def pom = readMavenPom()
          wildflyVersion = pom.properties['wildfly.version']
          sh 'rf -f pom.xml'
        }
      }
    }

    stage('Echo release parameters') {
      steps {
        echo """
          Release processing parameters:
          Version to release          ${buildToRelease.release}
          From build version          ${params.BUILD_VERSION}
          Wildfly version             ${wildflyVersion}
          POM parent version          ${buildToRelease.parent}
          Should release POM parent?  ${buildToRelease.releaseParent}
          Next version                ${nextVersion}
          """
      }
    }

    stage('Release Silverpeas Projects Definition') {
      when {
        expression { buildToRelease.releaseParent }
      }
      steps {
        build job: 'Silverpeas_Project_Definition_Release', propagate: true, wait: true
        copyArtifacts projectName: 'Silverpeas_Project_Definition_AutoDeploy', flatten: true
        script {
          def parentBuild = readYaml file: 'build.yaml'
          buildToRelease.parent = parentBuild.release
          sh 'rm -f build.yaml'
        }
      }
    }

    stage('Release Silverpeas Core') {
      steps {
        dir(projects.core) {
          git credentialsId: gitCredential, branch: branch, url: (gitBaseRepo + projects.core)
          releaseProject project: projects.core,
              commit: buildToRelease.commits[projects.core],
              version: buildToRelease.release,
              parent: buildToRelease.parent,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Prepare next version of Silverpeas Core') {
      steps {
        dir(project.core) {
          prepareNextVersion project: projects.core,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Release Silverpeas Components') {
      steps {
        dir(projects.components) {
          git credentialsId: gitCredential, branch: branch, url: (gitBaseRepo + projects.components)
          releaseProject project: projects.components,
              commit: buildToRelease.commits[projects.components],
              version: buildToRelease.release,
              parent: buildToRelease.parent,
              isPatch: isPatchVersion
          prepareNextVersion project: projects.components,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Prepare next version of Silverpeas Components') {
      steps {
        dir(projects.components) {
          prepareNextVersion project: projects.components,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Release Silverpeas Assembly') {
      steps {
        dir (projects.assembly) {
          git credentialsId: gitCredential, branch: branch, url: (gitBaseRepo + projects.assembly)
          releaseProject project: projects.assembly,
              commit: buildToRelease.commits[projects.assembly],
              version: buildToRelease.release,
              parent: buildToRelease.parent,
              isPatch: isPatchVersion
          prepareNextVersion project: projects.assembly,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Prepare next version of Silverpeas Assembly') {
      steps {
        dir (projects.assembly) {
          prepareNextVersion project: projects.assembly,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Release Silverpeas Setup') {
      steps {
        dir(projects.setup) {
          git credentialsId: gitCredential, branch: branch, url: (gitBaseRepo + projects.setup)
          releaseProject project: projects.setup,
              commit: buildToRelease.commits[projects.setup],
              version: buildToRelease.release,
              parent: buildToRelease.parent,
              isPatch: isPatchVersion
          prepareNextVersion project: projects.setup,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Prepare next version of Silverpeas Setup') {
      steps {
        dir(projects.setup) {
          prepareNextVersion project: projects.setup,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Release Silverpeas Distribution') {
      steps {
        dir(projects.distribution) {
          git credentialsId: gitCredential, branch: branch, url: (gitBaseRepo + projects.distribution)
          releaseProject project: projects.distribution,
              commit: buildToRelease.commits[projects.distribution],
              version: buildToRelease.release,
              parent: buildToRelease.parent,
              isPatch: isPatchVersion
          prepareNextVersion project: projects.distribution,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Prepare next version of Silverpeas Distribution') {
      steps {
        dir(projects.distribution) {
          prepareNextVersion project: projects.distribution,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Release Silverpeas Looks') {
      steps {
        dir(projects.looks) {
          git credentialsId: gitCredential, branch: branch, url: (gitBaseRepo + projects.looks)
          releaseProject project: projects.looks,
              commit: buildToRelease.commits[projects.looks],
              version: buildToRelease.release,
              parent: buildToRelease.parent,
              isPatch: isPatchVersion
          prepareNextVersion project: projects.looks,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Prepare next version of Silverpeas Looks') {
      steps {
        dir(projects.looks) {
          prepareNextVersion project: projects.looks,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Release Silverpeas Mobile') {
      steps {
        dir(projects.mobile) {
          git credentialsId: gitCredential, branch: branch, url: (gitBaseRepo + projects.mobile)
          releaseProject project: projects.mobile,
              commit: buildToRelease.commits[projects.mobile],
              version: buildToRelease.release,
              parent: buildToRelease.parent,
              isPatch: isPatchVersion
          prepareNextVersion project: projects.mobile,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Prepare next version of Silverpeas Mobile') {
      steps {
        dir(projects.mobile) {
          git credentialsId: gitCredential, branch: branch, url: (gitBaseRepo + projects.mobile)
          prepareNextVersion project: projects.mobile,
              version: buildToRelease.release,
              nextVersion: nextVersion,
              isPatch: isPatchVersion
        }
      }
    }

    stage('Publish Silverpeas Izpack Installer') {
      when {
        expression { branch == env.STABLE_BRANCH || branch == 'master' }
      }
      steps {
        build job: 'Silverpeas IzPack Installer', parameters: [
            string(name: 'SILVERPEAS_VERSION', value: buildToRelease.release),
            string(name: 'WILDFLY_VERSION', value: wildflyVersion.replace(".Final", ""))
        ], wait: false
      }
    }

    stage('Publish Docker Image for development environment') {
      when {
        expression { !isPatchVersion }
      }
      steps {
        build job: 'Silverpeas Dev Image', parameters: [
            string(name: 'IMAGE_VERSION', value: buildToRelease.release),
            string(name: 'WILDFLY_VERSION', value: wildflyVersion.replace(".Final", ""))
        ], wait: false
      }
    }

    stage('Publish Docker image for Jenkins job') {
      when {
        expression { !isPatchVersion }
      }
      steps {
        build job: 'Silverpeas Projects Build Image', parameters: [
            string(name: 'IMAGE_VERSION', value: buildToRelease.release),
            string(name: 'WILDFLY_VERSION', value: wildflyVersion.replace(".Final", ""))
        ], wait: false
      }
    }

    stage('Publish Docker Image of Silverpeas for testing purpose') {
      steps {
        build job: 'Silverpeas Test Image', parameters: [
            string(name: 'SILVERPEAS_VERSION', value: buildToRelease.release),
            string(name: 'WILDFLY_VERSION', value: wildflyVersion.replace(".Final", ""))
        ], wait: false
      }
    }

    stage('Prepare Docker Image of Silverpeas for production') {
      steps {
        build job: 'Silverpeas Prod Image', parameters: [
            string(name: 'SILVERPEAS_VERSION', value: buildToRelease.release),
            string(name: 'WILDFLY_VERSION', value: wildflyVersion.replace(".Final", ""))
        ], wait: false
      }
    }

    stage('Publish Silverpeas Documentation') {
      echo 'Trigger the documentation generation and publishing job'
      build job: 'Silverpeas_Documentation_Publishing', parameters: [
          string(name: 'IMAGE', value: dockerImage),
          string(name: 'VERSION', value: buildToRelease.release),
          string(name: 'PRJ_VERSION', value: parentVersion)
      ], wait: false
    }

    stage('Create YAML release report') {
      steps {
        script {
          writeYaml file: artifact, data: ['release': buildToRelease.release,
                                           'parent': buildToRelease.parent,
                                           'wildfly': wildflyVersion,
                                           'build': params.BUILD_VERSION,
                                           'branch': branch]
        }
      }
    }
  }
  post {
    success {
      script {
        currentBuild.displayName = version
        sh 'rm -rf target'
      }
      archiveArtifacts artifacts: artifact, fingerprint: true
    }
    always {
      step([$class                  : 'Mailer',
            notifyEveryUnstableBuild: true,
            recipients              : "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
            sendToIndividuals       : true])
    }
  }
}

void withGit( closure) {
  withCredentials([usernamePassword(credentialsId: gitCredential,
      usernameVariable: 'GIT_AUTH_USR', passwordVariable: 'GIT_AUTH_PSW')]) {
    sh 'git config --local credential.helper "!f() { echo username=\\${GIT_AUTH_USR}; echo password=\\$GIT_AUTH_PSW; }; f"'
    closure.call()
  }
}

void releaseProject(args) {
  // we first change the Maven repo definition to use the repo dedicated to releases
  // then we release the project and finally we tag it
  sh """
    git checkout ${args.commit}
    git checkout -b release-${args.version}
    """
  if (fileExists('pom.xml')) {
    publishVersionOfMavenProject(args)
  } else {
    publishVersionOfGradleProject(args)
  }
  withGit {
    sh """
      git commit -am "Release of ${args.version} from ${params.BUILD_VERSION} (commit ${args.commit})"
      git tag ${args.version}
      git push origin --tags
      """
  }
}

void publishVersionOfMavenProject(args) {
  def pom = readMavenPom()
  if (pom.parent && args.parent && pom.parent.version != args.parent) {
    sh """
      mvn -U versions:update-parent -DgenerateBackupPoms=false -DparentVersion="[${args.parent}]"
      git commit -am "Update parent POM to version ${args.parent}"
      """
  }
  if (fileExists('Jenkinsfile') && !args.isPatch) {
    sh """
      sed -i -e "s/silverpeas\\/silverbuild'/silverpeas\\/silverbuild:${args.version}'/g" Jenkinsfile
      """
  }
  sh """
    sed -i -e "s/<core.version>[0-9a-zA-Z.-]\\+/<core.version>${args.version}/g" pom.xml
    sed -i -e "s/<silverpeas.version>[0-9a-zA-Z.-]\\+/<silverpeas.version>${args.version}/g" pom.xml
    sed -i -e "s/<tag>[a-zA-Z0-9.\\-]\\+/<tag>${args.version}/g" pom.xml
    mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${args.version}
    mvn clean deploy -Dmaven.test.skip=true -Pdeployment -Prelease-sign-artifacts
    """
}

void publishVersionOfGradleProject(args) {
  if (fileExists("Jenkinsfile") && !args.isPatch) {
    sh """
      sed -i -e "s/silverpeas\\/silverbuild'/silverpeas\\/silverbuild:${args.version}'/g" Jenkinsfile
      """
  }
  sh """
    sed -i -e "s/version = '.\\+'/version = '${args.version}'/g" build.gradle
    ./gradlew clean build publish
    """
}

void prepareNextVersion(args) {
  if (!args.isPatch) {
    echo "Create bug-fix branch ${args.version}.x"
    createMinorBranch(args)
  }

  sh "git checkout ${args.branch}"
  if (fileExists('pom.xml')) {
    buildSnapshotVersionOfMavenProject(args.nextversion)
  } else {
    buildSnapshotVersionOfGradleProject(args.nextVersion)
  }
  withGit {
    sh """
      git commit -am "Prepare for development iteration of next version ${args.nextversion}"
      git push origin:${args.branch}
      """
  }
}

void createMinorBranch(args) {
  sh "git checkout -b ${args.version}.x"
  if (fileExists('pom.xml')) {
    buildSnapshotVersionOfMavenProject("${args.version}.1")
  } else if (fileExists('build.gradle')) {
    buildSnapshotVersionOfGradleProject("${args.version}.1")
  }
  withGit {
    String anyModif = sh(script: 'git status -s', returnStdout: true).trim()
    if (!anyModif.isEmpty()) {
      sh "git commit -am \"Prepare branch ${args.version}.x for bug fixes\""
    }
    sh "git push origin HEAD:${args.version}.x"
  }
}

void buildSnapshotVersionOfMavenProject(version) {
  sh """
    sed -i -e "s/<silverpeas.version>[0-9a-zA-Z.-]\\+/<silverpeas.version>${version}-SNAPSHOT/g" pom.xml
    sed -i -e "s/<next.release>[0-9.]\\+/<next.release>${version}/g" pom.xml
    sed -i -e "s/<tag>[a-zA-Z0-9.\\-]\\+/<tag>HEAD/g" pom.xml
    mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}-SNAPSHOT
    mvn clean install -Dmaven.test.skip=true -Djava.awt.headless=true
    """
}

void buildSnapshotVersionOfGradleProject(version) {
  sh """
    sed -i -e "s/version = '.\\+'/version = '${version}-SNAPSHOT'/g" build.gradle
    ./gradlew clean build publish
    """
}

String getNextVersion(version) {
  Matcher m = version =~ /^([0-9.]+)-rc(\d+)/
  String nextVersion
  if (m.matches()) {
    nextVersion = "${m.group(1)}-rc${(m.group(2) as Integer) + 1}"
  } else {
    String[] parts = version.split('\\.')
    nextVersion = parts.length < 3 ? "${parts[0]}.${(parts[1] as Integer) + 1}" : "${parts[0]}.${parts[1]}.${(parts[2] as Integer) + 1}"
  }
  return nextVersion
}

String getBranchType() {
  String type
  switch (branch) {
    case env.BRANCH_STABLE:
      type = 'Stable'
      break
    case 'master':
      type = 'Master'
      break
    default:
      type = branch
      break
  }
  return type
}

String getBranch() {
  Matcher matcher = params.BUILD_VERSION =~ '^(\\d+.\\d+)\\..*$'
  matcher ? "${matcher[0][1]}.x" : 'master'
}

boolean isPatchVersion() {
  Matcher m = params.BUILD_VERSION =~ /^\d\.\d\.\d-build\d+$/
  return m.matches()
}

String getDockerImageVersion() {
  Matcher matcher = params.BUILD_VERSION =~ '^(\\d+.\\d+)\\..*$'
  matcher ? "${matcher[0][1]}" : 'latest'
}