node {
  catchError {
    def version
    def nextversion
    docker.image("silverpeas/silverbuild")
        .inside('-u root -v $HOME/.m2/settings.xml:/root/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/root/.m2/settings-security.xml -v $HOME/.gitconfig:/root/.gitconfig -v $HOME/.ssh:/root/.ssh -v $HOME/.gnupg:/root/.gnupg') {
      stage('Preparation') {
        echo "Prepare the release of Silverpeas Project (and the dependencies definitions)..."
        sh "curl -fsSL -o pom.xml https://raw.githubusercontent.com/Silverpeas/Silverpeas-Project/master/pom.xml"
        def pom = readMavenPom()
        version = pom.properties['next.release']
        nextversion = getNextVersion(version)
      }
      stage('Silverpeas Dependencies') {
        echo "Release Silverpeas Dependencies ${version}..."
        fetchFromGithub('silverpeas-dependencies-bom')
        def pom = readMavenPom()
        if (pom.properties['jcr.accesscontrol.version'].contains('SNAPSHOT') || pom.properties['jcr.accesscontrol.version'].contains('build')) {
          error "The Silverpeas JCR AccessControl dependency must be a stable version. Current version is ${pom.properties['jcr.accesscontrol.version']}"
        }
        releaseVersion(version)
        prepareNextVersion(nextversion)
        pushToGithub('silverpeas-dependencies-bom')
      }
      stage('Silverpeas Test Dependencies') {
        echo "Release Silverpeas Test Dependencies ${version}..."
        fetchFromGithub('silverpeas-test-dependencies-bom')
        releaseVersion(version)
        prepareNextVersion(nextversion)
        pushToGithub('silverpeas-test-dependencies-bom')
      }
      stage('Silverpeas Project') {
        echo "Release ${version} Silverpeas Project ${version}..."
        fetchFromGithub('Silverpeas-Project')
        sh """
sed -i -e "s/<silverpeas.bom.version>[0-9a-zA-Z.-]\\+/<silverpeas.bom.version>${version}/g" pom.xml
"""
        releaseVersion(version)

        sh """
sed -i -e "s/<silverpeas.bom.version>${version}/<silverpeas.bom.version>${nextversion}-SNAPSHOT/g" pom.xml
"""
        prepareNextVersion(nextversion)
        pushToGithub('Silverpeas-Project')
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
        sendToIndividuals: true])
}

def releaseVersion(version) {
  echo "-> Release version ${version}"
  sh """
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean deploy -Djava.awt.headless=true
git commit -am "Release of ${version}"
git tag ${version}
"""
}

def prepareNextVersion(nextversion) {
  echo "-> Prepare Next Snapshot version ${nextversion}"
  sh """
sed -i -e "s/<next.release>[0-9.]\\+/<next.release>${nextversion}/g" pom.xml
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${nextversion}-SNAPSHOT
mvn clean install -Djava.awt.headless=true
git commit -am "Prepare for next development iteration of next version ${nextversion}"
"""
}

def fetchFromGithub(project) {
  sh "rm -rf *"
  git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: "https://github.com/Silverpeas/${project}"
}

def pushToGithub(project) {
  withCredentials([usernamePassword(credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59',
      usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
    sh """
git push https://${USER}:${PASSWORD}@github.com/Silverpeas/${project} HEAD:master
git push https://${USER}:${PASSWORD}@github.com/Silverpeas/${project} --tags
"""
  }
}

@NonCPS
def getNextVersion(version) {
  String[] parts = version.split('\\.')
  parts.length < 3 ? "${parts[0]}.${(parts[1] as Integer) + 1}" : "${parts[0]}.${parts[1]}.${(parts[2] as Integer) + 1}"
}

