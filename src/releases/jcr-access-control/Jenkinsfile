/*
 * This pipeline requires the following build parameter to be set:
 * BUILD_VERSION: the version number of an existing Silverpeas build from which the release will be performed
 */
node {
  catchError {
    def nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def gitRepo = 'github.com/Silverpeas/Silverpeas-JCR-AccessControl'
    def version
    docker.image("silverpeas/silverbuild")
        .inside('-u root -v $HOME/.m2/settings.xml:/root/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/root/.m2/settings-security.xml -v $HOME/.gitconfig:/root/.gitconfig -v $HOME/.ssh:/root/.ssh -v $HOME/.gnupg:/root/.gnupg') {
      stage('Preparation') {
        version = getVersionNumber(params.BUILD_VERSION)
        echo "Prepare the release of JCR Access Control ${version}..."
      }
      stage('Release') {
        echo "Release of JCR Access Control ${version}..."
        // Fetch the Git commit corresponding to the build number
        sh "curl -fsSL ${nexusRepo}/org/silverpeas/jcr/access-control/${params.BUILD_VERSION}/access-control-${params.BUILD_VERSION}.jar"
        def manifest = readManifest file: "${env.WORKSPACE}/access-control-${params.BUILD_VERSION}.jar"
        def commit = manifest.main['Git-Commit']

        // checkout the project
        sh "rm -rf *"
        git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: "https://${gitRepo}.git"

        // release the project
        releaseProject(gitRepo, commit, version)
        prepareNextSnapshotVersion(gitRepo, commit, version)
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
        sendToIndividuals: true])
}

def buildMavenProjectSnapshot(nextVersion) {
  sh """
sed -i -e "s/<next.release>[0-9.]\\+/<next.release>${nextVersion}/g" pom.xml
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${nextVersion}-SNAPSHOT
mvn clean install -Dmaven.test.skip=true
"""
}

def buildMavenProjectRelease(version) {
  sh """
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean deploy -Dmaven.test.skip=true -Prelease-sign-artifacts
"""
}

def prepareNextSnapshotVersion(gitRepo, commit, version) {
  echo "-> Prepare Next Snapshot version after ${version}"
  def nextversion = getNextVersion(version)

  echo "Prepare the next development iteration for ${nextversion}"
  sh "git checkout master"
  buildMavenProjectSnapshot(nextversion)
  withCredentials([usernamePassword(credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59',
      usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
    sh """
git commit -am "${version} has been released from commit ${commit} (build version ${params.BUILD_VERSION}). Prepare for development iteration of next version ${nextversion}"
git push https://${USER}:${PASSWORD}@${gitRepo} HEAD:master
"""
  }
}

def releaseProject(gitRepo, commit, version) {
  echo "-> Release project to version ${version}"
  // we first change the Maven repo definition to use the repo dedicated to releases
  // then we release the project and finally we tag it
  sh """
git checkout ${commit}
git checkout -b release-${version}
"""
  buildMavenProjectRelease(version)
  withCredentials([usernamePassword(credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59',
      usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
    sh """
git commit -am "Release of ${version}"
git tag ${version}
git push https://${USER}:${PASSWORD}@${gitRepo} --tags
"""
  }
}

@NonCPS
def getVersionNumber(buildVersion) {
  def matcher = buildVersion =~ '(.+)-build\\d+'
  matcher ? matcher[0][1] : null
}

@NonCPS
def getNextVersion(version) {
  String[] parts = version.split('\\.')
  "${parts[0]}.${(parts[1] as Integer) + 1}"
}