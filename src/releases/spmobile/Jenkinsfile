node {
  catchError {
    def gitRepo = 'github.com/Silverpeas/silverpeasmobile'
    def version
    def nextversion
    docker
        .image("silverpeas/silverbuild").inside('-u root -v $HOME/.m2/settings.xml:/root/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/root/.m2/settings-security.xml -v $HOME/.gitconfig:/root/.gitconfig -v $HOME/.ssh:/root/.ssh -v $HOME/.gnupg:/root/.gnupg') {
      stage('Preparation') {
        echo "Prepare the release of Silverpeas Project (and the dependencies definitions)..."
        git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: "https://${gitRepo}"
        def pom = readMavenPom()
        version = pom.properties['next.release']
        nextversion = getNextVersion(version)
      }
      stage('Silverpeas Mobile Release') {
        echo "Release Silverpeas Mobile ${version}..."
        releaseVersion(version)
      }
      stage('Silverpeas Mobile next snapshot') {
        echo "Prepare Next Snapshot Version of Silverpeas Mobile: ${nextversion}..."
        copyArtifacts projectName: 'Silverpeas_Master_AutoDeploy',
            filter: 'org/silverpeas/core/*-build*/*.pom',
            flatten: true
        def files = findFiles glob: '*.pom'
        pom = readMavenPom file: files[0].path
        def silverpeasVersion = pom.version
        copyArtifacts projectName: 'Silverpeas_Project_Definition_AutoDeploy',
            filter: 'org/silverpeas/silverpeas-project/*-build*/*.pom',
            flatten: true
        files = findFiles glob: '*.pom'
        pom = readMavenPom file: files[0].path
        def parentVersion = pom.version
        prepareNextVersion repo: gitRepo,
            version: nextversion,
            silverpeas: silverpeasVersion,
            parent: parentVersion
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org, sebastien.vuillet@silverpeas.org",
        sendToIndividuals: true])
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: false,
        recipients: "nicolas.eysseric@silverpeas.org, david.lesimple@silverpeas.org",
        sendToIndividuals: true])
}

def releaseVersion(version) {
  echo "-> Release version ${version}"
  sh """
sed -i -e "s/<core.version>[0-9a-z.\\-]\\+/<core.version>${version}/g" pom.xml
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean deploy -Djava.awt.headless=true
git commit -am "Release of ${version}"
git tag ${version}
"""
}

def prepareNextVersion(args) {
  echo "-> Prepare Next Snapshot version ${args.version}"
  withCredentials([usernamePassword(credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59',
      usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
    sh """
mvn -U versions:update-parent -DgenerateBackupPoms=false -DparentVersion=${args.parent}
sed -i -e "s/<next.release>[0-9.]\\+/<next.release>${args.version}/g" pom.xml
sed -i -e "s/<core.version>[0-9.]\\+/<core.version>${args.silverpeas}/g" pom.xml
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${args.version}-SNAPSHOT
mvn clean install -Djava.awt.headless=true
git commit -am "Prepare for next development iteration of next version ${args.version}"
git push https://${USER}:${PASSWORD}@${args.repo} HEAD:master
git push https://${USER}:${PASSWORD}@${args.repo} --tags
"""
  }
}

@NonCPS
def getNextVersion(version) {
  String[] parts = version.split('\\.')
  parts.length < 3 ? "${parts[0]}.${(parts[1] as Integer) + 1}" : "${parts[0]}.${parts[1]}.${(parts[2] as Integer) + 1}"
}

