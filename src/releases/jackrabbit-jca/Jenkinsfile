node {
  catchError {
    def gitRepo = 'github.com/Silverpeas/Silverpeas-Jackrabbit-JCA'
    def version
    docker.image("silverpeas/silverbuild")
        .inside('-u root -v $HOME/.m2/settings.xml:/root/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/root/.m2/settings-security.xml -v $HOME/.gitconfig:/root/.gitconfig -v $HOME/.ssh:/root/.ssh -v $HOME/.gnupg:/root/.gnupg') {
      stage('Preparation') {
        git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: "https://${gitRepo}"
        def pom = readMavenPom()
        version = pom.properties['next.release']
        if (pom.properties['silverpeas-jca.version'].contains('build') || pom.properties['silverpeas-jca.version'].contains('SNAPSHOT')) {
          error("The Silverpeas JCR AccessControl dependency must be a stable version for this project to be released. Current version is ${pom.properties['silverpeas-jca.version']}")
        }
      }
      stage('Release') {
        // release the project
        echo "-> Release project to version ${version}"
        withCredentials([usernamePassword(credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59',
            usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
          // we first change the Maven repo definition to use the repo dedicated to releases
          // then we release the project and finally we tag it
          sh """
git checkout master
git checkout -b release-${version}
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean deploy -Dmaven.test.skip=true -Prelease-sign-artifacts
git commit -am "Release of ${version}"
git tag ${version}
git push https://${USER}:${PASSWORD}@${gitRepo} HEAD:master
git push https://${USER}:${PASSWORD}@${gitRepo} --tags
"""
        }
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
        sendToIndividuals: true])
}

