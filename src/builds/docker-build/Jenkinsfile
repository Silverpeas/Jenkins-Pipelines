/**
 * Pipeline to build a Docker image dedicated in the build of Silverpeas projects.
 *
 * Some parameters for this pipeline are required as they are used as arguments in the image building.
 * The version of the Docker image to build is also provided as a parameter for this pipeline. If the version
 * is other than 'latest', then the Git project is tagged with that version once the image build done.
 *
 * It requires the following parameters:
 * IMAGE_VERSION   the version number of the image to build. The version of the image should match the version
                   number of the Silverpeas platform for which the projects will be built. For the next 
                   major or minor version of the Silverpeas platform in development, 'latest' is the recommended
                   choice.
 * WILDFLY_VERSION the version of Wildfly prepared for running the integration tests
 * JAVA_VERSION    the version of Java on which the Silverpeas platform is based.
 */
pipeline {
  
  agent any

  parameters {
    string (
      description: 'Version of Wildfly to use in integration tests',
      name: 'WILDFLY_VERSION'
    )
    string (
      defaultValue: '11',
      description: 'Version of Java to build a Silverpeas project',
      name: 'JAVA_VERSION'
    )
    string (
      defaultValue: 'latest',
      description: 'Version of the Docker image to build. Should match the Silverpeas version',
      name: 'IMAGE_VERSION'
    )
  }

  environment {
    registryCredential = 'dockerhub-mmoquillon'
    gitRepo = 'https://github.com/Silverpeas/docker-silverpeas-build'
    gitCredential = 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59'
    imageName = 'silverpeas/silverbuild'
    dockerImage = ''
    modified = 0
  }

  stages {
    stage('Prepare the build') {
      steps {
        git([url: gitRepo, credentialsId: gitCredential])
        script {
          modified = sh script: """
            sed -i -e "s/WILDFLY_VERSION=[0-9.]\\+/WILDFLY_VERSION=${params.WILDFLY_VERSION}/g" Dockerfile
            sed -i -e "s/JAVA_VERSION=[0-9]\\+/JAVA_VERSION=${params.JAVA_VERSION}/g" Dockerfile
            git diff --quiet
            """, returnStatus: true
        }
      }
    }
    stage('Push modifications') {
      environment {
        GIT_AUTH = credentials("${gitCredential}")
      }
      when {
        expression { modified == 1 }
      }
      steps {
        echo "Update Wildfly version to ${params.WILDFLY_VERSION} and Java version to ${params.JAVA_VERSION}"
        sh "git commit -am \"Upgrade for Wildfly ${params.WILDFLY_VERSION} and Java ${params.JAVA_VERSION}\""
        sh '''
           git config --local credential.helper "!f() { echo username=\\${GIT_AUTH_USR}; echo password=\\$GIT_AUTH_PSW; }; f"
           git push origin HEAD:master
           '''
      }
    }
    stage('Build image') {
      steps {
        script {
          dockerImage = docker.build "${imageName}:${params.IMAGE_VERSION}"
        }
      }
    }
    stage('Register image') {
      steps{
        script {
          docker.withRegistry('', registryCredential ) {
              dockerImage.push()
          }
        }
      }
    }
    stage('Tag project') {
      environment {
        GIT_AUTH = credentials("${gitCredential}")
      }
      when {
        expression { params.IMAGE_VERSION != 'latest' }
      }
      steps {
        sh "git tag ${params.IMAGE_VERSION}"
        sh 'git push origin --tags"'
      }
    }
  }
  post {
    success {
      script {
        currentBuild.displayName = params.IMAGE_VERSION
      }
    }
    always {
      step([$class                  : 'Mailer',
            notifyEveryUnstableBuild: true,
            recipients              : "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
            sendToIndividuals       : true])
    }
  }
}