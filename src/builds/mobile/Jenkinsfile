import java.util.regex.Matcher

/**
 * Pipeline to construct a build version of Silverpeas Mobile. The execution of the pipeline depends
 * on the latest successful build version of Silverpeas as it fetches the build result report
 * from the successful Jenkins job in order to update correctly its dependencies on both Silverpeas
 * Core and Silverpeas Components. This pipeline releases the same build version that the latest
 * one of Silverpeas meaning that the version of Silverpeas Mobile follows the version of
 * Silverpeas on which it depends.
 *
 * Because this pipeline is based upon some convention rules, some expectations have to be
 * fulfilled:
 * Jenkins Job name : the name of the Jenkins job executing this pipeline has to be named as
 *                    '[ANY WORD]_[TYPE_BRANCH]_[ANY WORD]' with TYPE_BRANCH the type of the SCM
 *                    branch: 'Master' for the current development version, 'Stable' for the current
 *                    stable version, the project's branch name for older stable versions.
 * Dependent Jenkins job name: the name of the job producing a build version of Silverpeas upon
 *                             which this project depend must be formatted as
 *                             Silverpeas_[TYPE_BRANCH]_AutoDeploy with TYPE_BRANCH the type of
 *                             the SCM branch: 'Master' for the current development version,
 *                             'Stable' for the current stable version, the project's branch name
 *                             for older stable versions.
 *
 * This pipeline requires the following parameters:
 * STABLE        (optional) the name of the SCM branch in which is currently developed the stable
 *               version of Silverpeas. Must be updated at each major and minor version release.
 *               It is set by default to the branch of the latest stable version of Silverpeas.
 * IMAGE_VERSION the version of the Docker image to use for running the job as for each
 *               version of the image correspond a given version lifecycle of Silverpeas.
 * SKIP_TEST     (optional) a boolean indicating if the execution of the test should be skipped.
 *               False by default.
 */
pipeline {

  agent {
    docker {
      image "silverpeas/silverbuild:${params.IMAGE_VERSION}"
      args '-v $HOME/.m2/settings.xml:/home/silverbuild/.m2/settings.xml' +
          ' -v $HOME/.m2/settings-security.xml:/home/silverbuild/.m2/settings-security.xml' +
          ' -v $HOME/.gitconfig:/home/silverbuild/.gitconfig' +
          ' -v $HOME/.ssh:/home/silverbuild/.ssh' +
          ' -v $HOME/.gnupg:/home/silverbuild/.gnupg'
    }
  }

  parameters {
    string (
        defaultValue: '6.2.x',
        description: 'The SCM branch corresponding to the current stable version of Silverpeas',
        name: 'STABLE'
    )
    /* Commented to allow to set specifically a value directly in the job in Jenkins.
    string (
        defaultValue: 'latest',
        description: 'Version of the Docker image to use to build the project',
        name: 'IMAGE_VERSION'
    )*/
    booleanParam (
        defaultValue: false,
        description: 'Flag indicating if the excecution of the tests should be skipped',
        name: 'SKIP_TEST'
    )
  }

  environment {
    nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    gitRepo = 'https://github.com/Silverpeas/silverpeasmobile'
    gitCredential = 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59'
    branch = ''
    parentVersion = ''
    buildVersion = ''
    release = ''
    pom = null
    artifact = 'target/build.yaml'
  }

  stages {
    stage('Resolve dependency on Silverpeas') {
      steps {
        script {
          String devType = getBranchTypeFromJobName()
          branch = getBranch(devType)
          echo "Working on branch ${branch}"
          String silverpeasJobName = "Silverpeas_${devType}_AutoDeploy"
          copyArtifacts projectName: silverpeasJobName, flatten: true
          def silverpeasBuild = readYaml file: 'build.yaml'
          parentVersion = silverpeasBuild.parent
          buildVersion = silverpeasBuild.version
          release = silverpeasBuild.release
          sh 'rm -f build.yaml'
        }
        echo "Parent version is ${parentVersion}"
        echo "Build Silverpeas Mobile ${buildVersion} upon Silverpeas ${buildVersion}"
      }
    }
    stage('Checkout the project') {
      steps {
        git([url: gitRepo, branch: branch, credentialsId: gitCredential])
        script {
          pom = readMavenPom()
        }
      }
    }
    stage('Check POM parent version') {
      when {
        expression { pom.parent.version.contains('SNAPSHOT') }
      }
      steps {
        error "The parent POM must be at a stable or a build version for this project to be deployed. Current version is ${pom.parent.version}"
      }
    }
    stage('Update POM parent') {
      environment {
        GIT_AUTH = credentials("${gitCredential}")
      }
      when {
        expression {
          !pom.parent.version.matches(/[0-9.]+/) && parentVersion && pom.parent.version != parentVersion
        }
      }
      steps {
        sh '''
          git config --local credential.helper "!f() { echo username=\\${GIT_AUTH_USR}; echo password=\\$GIT_AUTH_PSW; }; f"
          '''
        sh """
          mvn -U versions:update-parent -DgenerateBackupPoms=false -DparentVersion="[${parentVersion}]"
          git commit -am "Update parent POM to version ${parentVersion}"
          git push origin HEAD:${branch}
          """
      }
    }
    stage('Update dependency on Silverpeas') {
      environment {
        GIT_AUTH = credentials("${gitCredential}")
      }
      when {
        expression {
          pom.properties['silverpeas.version'] != buildVersion
        }
      }
      steps {
        sh '''
          git config --local credential.helper "!f() { echo username=\\${GIT_AUTH_USR}; echo password=\\$GIT_AUTH_PSW; }; f"
          '''
        sh """
          sed -i -e "s/<silverpeas.version>[0-9a-zA-Z.-]\\+/<silverpeas.version>${buildVersion}/g" pom.xml
          git commit -am "Update dependency on Silverpeas to version ${buildVersion}"
          git push origin HEAD:${branch}
          """
      }
    }
    stage('Build and Publish') {
      steps {
        script {
          String skipTest = params.SKIP_TEST ? '-Dmaven.test.skip=true' : ''
          sh "mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${buildVersion}"
          if (branch != 'master') {
            sh "mvn clean deploy -DaltDeploymentRepository=silverpeas::default::${nexusRepo} -Pdeployment -Pcoverage ${skipTest} -Djava.awt.headless=true -Dcontext=ci"
          } else {
            sh """
              /opt/wildfly-for-tests/wildfly-*.Final/bin/standalone.sh -c standalone-full.xml &> /dev/null &
              mvn clean deploy -DaltDeploymentRepository=silverpeas::default::${nexusRepo} -Pdeployment -Pcoverage  ${skipTest} -Djava.awt.headless=true -Dcontext=ci
              /opt/wildfly-for-tests/wildfly-*.Final/bin/jboss-cli.sh --connect :shutdown
              """
          }
        }
      }
    }
    stage('Create YAML build report') {
      steps {
        script {
          String commit = sh script: 'git rev-parse HEAD', returnStdout: true
          writeYaml file: artifact, data: ['version': buildVersion,
                                           'parent' : parentVersion,
                                           'release': release,
                                           'commit' : commit.trim(),
                                           'tested' : !params.SKIP_TEST]
        }
      }
    }
  }
  post {
    success {
      script {
        currentBuild.displayName = buildVersion
      }
      archiveArtifacts artifacts: artifact, fingerprint: true
    }
    always {
      step([$class                  : 'Mailer',
            notifyEveryUnstableBuild: true,
            recipients              : "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org, sebastien.vuillet@silverpeas.org",
            sendToIndividuals       : true])
    }
  }
}

String getBranchTypeFromJobName() {
  Matcher matcher = env.JOB_NAME =~ /.+_([a-zA-Z0-9.]+)_.+/
  String type = (matcher.matches() ? matcher[0][1] : '')
  if (type == '') {
    error 'The Jenkins job is misnamed! Expecting to find the branch type in it'
  }
  return type;
}

String getBranch(String branchType) {
  String typeInLowerCase = branchType.toLowerCase()
  return typeInLowerCase == 'stable' ? params.STABLE : typeInLowerCase
}
