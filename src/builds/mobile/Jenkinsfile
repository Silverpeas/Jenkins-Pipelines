import java.util.regex.Matcher

/*
 * This pipeline has some expectations:
 * - the job name is formatted as Silverpeas_Mobile_<PRJ_NAME>_AutoDeploy with PRJ_NAME the name
 *   of the project version: Master for the current development version, Stable for the current
 *   stable version, and the project's branch name for older stable versions.
 * - the name of the job building a release candidate of Silverpeas upon which this project depend
 *   is formatted as Silverpeas_<PRJ_NAME>_AutoDeploy with PRJ_NAME the same value as above.
 *
 * This pipeline requires the following build parameter to be set:
 * - BRANCH: the name of the Git branch from which the project has to be fetched and built.
 * - IMAGE_VERSION: the version of the Docker image to use for running the job.
 * - Optionally, the following build parameter can be set at true to skip the executions of the
 *   tests: SKIP_TEST.
 */
node {
  catchError {
    def nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def version
    def parentVersion
    def release
    def commit
    docker.image("silverpeas/silverbuild:${params.IMAGE_VERSION}").inside('-v $HOME/.m2/settings.xml:/home/silverbuild/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/home/silverbuild/.m2/settings-security.xml -v $HOME/.gitconfig:/home/silverbuild/.gitconfig -v $HOME/.ssh:/home/silverbuild/.ssh -v $HOME/.gnupg:/home/silverbuild/.gnupg') {
      stage('Prepare') {
        if (!params.BRANCH) {
          error "Please set the parameter BRANCH to indicate what branch of the project to build!"
        }
        sh "rm -rf *"
        def silverpeasProjectName = fetchSilverpeasDependency(env.JOB_NAME)
        copyArtifacts projectName: silverpeasProjectName, flatten: true
        def silverpeasBuild = readYaml file: 'build.yaml'
        parentVersion = silverpeasBuild.parent
        version = silverpeasBuild.version
        release = silverpeasBuild.release
        echo "Parent version is ${parentVersion}"
        echo "Trigger build version ${version} of Silverpeas Mobile upon Silverpeas Platform ${version} from ${params.BRANCH}..."
      }
      stage('Build') {
        fetchFromGithub 'silverpeasmobile'
        buildMavenProject project: 'silverpeasmobile',
            version: version,
            parentVersion: parentVersion
      }
      stage('Deploy') {
        commit = deployMavenProject(project: 'silverpeasmobile',
            repo: nexusRepo)
      }
      stage('Archive Build Version') {
        sh "mkdir -p target"
        final String artifact = 'target/build.yaml'
        writeYaml file: artifact, data: ['version': version,
                                         'parent': parentVersion,
                                         'release': release,
                                         'commit': commit,
                                         'tested': !params.SKIP_TEST]
        archiveArtifacts artifacts: artifact, fingerprint: true
        currentBuild.displayName = version
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org, nicolas.eysseric@silverpeas.org",
        sendToIndividuals: true])
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: false,
        recipients: "nicolas.eysseric@silverpeas.org, david.lesimple@silverpeas.org, sebastien.vuillet@silverpeas.org",
        sendToIndividuals: true])
}

def fetchFromGithub(project) {
  dir (project) {
    git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', branch: params.BRANCH, poll: false, url: "https://github.com/Silverpeas/${project}"
  }
}

def pushToGithub(project, branch) {
  withCredentials([usernamePassword(credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59',
      usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
    sh "git push https://${USER}:${PASSWORD}@github.com/Silverpeas/${project} HEAD:${branch}"
  }
}

def buildMavenProject(args) {
  dir(args.project) {
    def pom = readMavenPom()
    if (pom.parent) {
      if (!pom.parent.version.matches(/[0-9.]+/) && args.parentVersion && pom.parent.version != args.parentVersion) {
        sh """
mvn -U versions:update-parent -DgenerateBackupPoms=false -DparentVersion="[${args.parentVersion}]"
git commit -am "Update parent POM to version ${args.parentVersion}"
"""
        pushToGithub(args.project, params.BRANCH)
      } else if (pom.parent.version.contains('SNAPSHOT')) {
        error "The parent POM must be at a stable or a build version for this project to be deployed. Current version is ${pom.parent.version}"
      }
    }
    sh """
sed -i -e "s/<silverpeas.version>[0-9a-zA-Z.-]\\+/<silverpeas.version>${args.version}/g" pom.xml
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${args.version}
"""
    if (args.version.startsWith('6.0')) {
      sh """
/usr/local/bin/ooserver start
mvn clean install -Pdeployment -Djava.awt.headless=true -Dcontext=ci -Dmaven.test.skip=true
/usr/local/bin/ooserver stop
"""
    } else {
      if (params.SKIP_TEST) {
        sh "mvn clean install -Pdeployment -Dmaven.test.skip=true -Djava.awt.headless=true -Dcontext=ci"
      } else {
        sh "mvn clean install -Pdeployment -Djava.awt.headless=true -Dcontext=ci"
      }
    }
  }
}

def deployMavenProject(args) {
  dir(args.project) {
    sh "mvn deploy -DaltDeploymentRepository=silverpeas::default::${args.repo} -Pdeployment -Djava.awt.headless=true -Dmaven.test.skip=true"
    final String commit = sh script: 'git rev-parse HEAD', returnStdout: true
    return commit.trim()
  }
}

@NonCPS
def fetchTargetRepo(nexusRepoUrl) {
  Matcher matcher = nexusRepoUrl =~ /(repositories\/.+)/
  matcher ? matcher[0][1] : ''
}

@NonCPS
def fetchSilverpeasDependency(jobName) {
  Matcher matcher = jobName =~ /Silverpeas_Mobile_([a-zA-Z0-9.]+)_AutoDeploy/
  matcher.matches() ? "Silverpeas_${matcher[0][1]}_AutoDeploy" : ''
}

