node {
  catchError {
    def maven = 'Maven 3.3'
    def java = 'Java Oracle 8'
    def nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def version
    stage('Preparation') {
      def buildNumber = (new Date()).format('yyMMdd')
      echo "Prepare the build ${buildNumber} of Silverpeas Project (and the dependencies definitions)..."
      deleteDir()
      sh "wget https://raw.githubusercontent.com/Silverpeas/Silverpeas-Project/master/pom.xml"
      def pom = readMavenPom()
      version = "${pom.properties['next.release']}-build${buildNumber}"
    }
    stage('Silverpeas Dependencies') {
      echo "Build ${version} of Silverpeas Dependencies..."
      fetchFromGithub('silverpeas-dependencies-bom')
      withMaven(jdk: java, maven: maven) {
        def pom = readMavenPom()
        if (pom.properties['jcr.accesscontrol.version'].contains('SNAPSHOT')) {
          error "The Silverpeas JCR AccessControl dependency must be a stable or a build version. Current version is ${pom.properties['jcr.accesscontrol.version']}"
        }
        buildAndDeploy(version, nexusRepo)
      }
    }
    stage('Silverpeas Test Dependencies') {
      echo "Build ${version} of Silverpeas Test Dependencies..."
      fetchFromGithub('silverpeas-test-dependencies-bom')
      withMaven(jdk: java, maven: maven) {
        buildAndDeploy(version, nexusRepo)
      }
    }
    stage('Silverpeas Project') {
      echo "Build ${version} of Silverpeas Project..."
      fetchFromGithub('Silverpeas-Project')
      withMaven(jdk: java, maven: maven) {
        sh """
sed -i -e "s/<silverpeas.bom.version>[0-9a-zA-Z.-]\\+/<silverpeas.bom.version>${version}/g" pom.xml
"""
        buildAndDeploy(version, nexusRepo)
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
        sendToIndividuals: true])
}

def buildAndDeploy(version, repo) {
  sh """
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean deploy -DaltDeploymentRepository=silverpeas::default::${repo} -Djava.awt.headless=true
"""
}

def fetchFromGithub(project) {
  deleteDir()
  git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: "https://github.com/Silverpeas/${project}"
}

