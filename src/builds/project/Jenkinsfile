node {
  catchError {
    def nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def version
    docker.image('silverpeas/silverbuild')
        .inside('-u root -v $HOME/.m2/settings.xml:/root/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/root/.m2/settings-security.xml -v $HOME/.gitconfig:/root/.gitconfig -v $HOME/.ssh:/root/.ssh -v $HOME/.gnupg:/root/.gnupg') {
      stage('Preparation') {
        def buildNumber = (new Date()).format('yyMMdd')
        echo "Prepare the build ${buildNumber} of Silverpeas Project (and the dependencies definitions)..."
        sh "curl -fsSL -o pom.xml https://raw.githubusercontent.com/Silverpeas/Silverpeas-Project/master/pom.xml"
        def pom = readMavenPom()
        version = "${pom.properties['next.release']}-build${buildNumber}"
      }
      stage('Silverpeas Dependencies') {
        echo "Build ${version} of Silverpeas Dependencies..."
        fetchFromGithub('silverpeas-dependencies-bom')
        def pom = readMavenPom()
        if (pom.properties['jcr.accesscontrol.version'].contains('SNAPSHOT')) {
          error "The Silverpeas JCR AccessControl dependency must be a stable or a build version. Current version is ${pom.properties['jcr.accesscontrol.version']}"
        }
        buildAndDeploy(version, nexusRepo)
      }
      stage('Silverpeas Test Dependencies') {
        echo "Build ${version} of Silverpeas Test Dependencies..."
        fetchFromGithub('silverpeas-test-dependencies-bom')
        buildAndDeploy(version, nexusRepo)
      }
      stage('Silverpeas Project') {
        echo "Build ${version} of Silverpeas Project..."
        fetchFromGithub('Silverpeas-Project')
        sh """
sed -i -e "s/<silverpeas.bom.version>[0-9a-zA-Z.-]\\+/<silverpeas.bom.version>${version}/g" pom.xml
"""
        buildAndDeploy(version, nexusRepo)
      }
      stage('Archive Build Results') {
        sh """
mkdir -p target/org/silverpeas
cp -ra /root/.m2/repository/org/silverpeas/* target/org/silverpeas/
"""
        archiveArtifacts artifacts: "target/org/silverpeas/**/${version}/*.pom", fingerprint: true
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
        sendToIndividuals: true])
}

def buildAndDeploy(version, repo) {
  sh """
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean deploy -DaltDeploymentRepository=silverpeas::default::${repo} -Djava.awt.headless=true
"""
}

def fetchFromGithub(project) {
  sh "rm -rf *"
  git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: "https://github.com/Silverpeas/${project}"
}

