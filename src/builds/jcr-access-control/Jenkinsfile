node {
  catchError {
    def nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def gitRepo = 'https://github.com/Silverpeas/Silverpeas-JCR-AccessControl.git'
    def version
    def release
    docker.image("silverpeas/silverbuild")
        .inside('-v $HOME/.m2/settings.xml:/home/silverbuild/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/home/silverbuild/.m2/settings-security.xml -v $HOME/.gitconfig:/home/silverbuild/.gitconfig -v $HOME/.ssh:/home/silverbuild/.ssh -v $HOME/.gnupg:/home/silverbuild/.gnupg') {
      stage('Preparation') {
        def buildNumber = (new Date()).format('yyMMdd')
        echo "Prepare the build ${buildNumber} of Silverpeas JCR Access Controller..."
        // checkout the project
        git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: "${gitRepo}"
        def pom = readMavenPom()
        release = pom.properties['next.release']
        version = "${release}-build${buildNumber}"
        sh "mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}"
      }
      stage('Build and Deploy') {
        sh "mvn clean deploy -DaltDeploymentRepository=silverpeas::default::${nexusRepo} -Djava.awt.headless=true"
      }
      stage('Archive Build Version') {
        final String commit = sh script: 'git rev-parse HEAD', returnStdout: true
        String artifact = 'target/build.yaml'
        writeYaml file: artifact, data: ['version': version, 'commit': commit.trim(), 'release': release]
        archiveArtifacts artifacts: artifact, fingerprint: true
        currentBuild.displayName = version
      }
    }
  }
step([$class                  : 'Mailer',
      notifyEveryUnstableBuild: true,
      recipients              : "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
      sendToIndividuals       : true])
}

