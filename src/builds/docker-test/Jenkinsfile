/**
 * Pipeline to build a Docker image dedicated to test Silverpeas at a given build version.
 *
 * This pipeline is triggered by another one, say the one that construct a build version of
 * Silverpeas in development on the main branch of the SCM (from which the next futur major or minor
 * version will come).
 *
 * It requires the following parameters:
 * SILVERPEAS_VERSION the build version of Silverpeas to run
 * WILDFLY_VERSION    (optional) the version of Wildfly atop of which Silverpeas will run. If not
 *                    set, then the value in the Dockerfile isn't updated and it is the wildfly
 *                    version as set in the Dockerfile that will be used.
 * IMAGE_VERSION      (optional) the version number of the image to build. The version of the image
 *                    should match the version number of the Silverpeas platform for which the projects
 *                    will be built. For a build version of the next major or minor version of
 *                    Silverpeas, 'latest' is the recommended choice. By default it is set at
 *                    'latest'.
 */
pipeline {
  
  agent any

  parameters {
    string (
        description: 'Version of Silverpeas to test',
        name: 'SILVERPEAS_VERSION'
    )
    string (
        defaultValue: '',
        description: 'Version of Wildfly to use for running Silverpeas',
        name: 'WILDFLY_VERSION'
    )
    string (
        defaultValue: 'latest',
        description: 'Version of the Docker image to build. Should match the Silverpeas version',
        name: 'IMAGE_VERSION'
    )
  }

  environment {
    registryCredential = 'dockerhub-mmoquillon'
    gitRepo = 'https://github.com/Silverpeas/docker-silverpeas-test'
    gitCredential = 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59'
    imageName = 'silverpeas/silverpeas-test'
    dockerImage = ''
    modified = 0
  }

  stages {
    stage('Fetch the project') {
      steps {
        git([url: gitRepo, credentialsId: gitCredential])
      }
    }
    stage('Update Wildfly version') {
      when {
        expression { params.WILDFLY_VERSION && params.WILDFLY_VERSION != '' }
      }
      steps {
        echo "Update Wildfly to ${params.WILDFLY_VERSION}"
        script {
          modified = sh script: """
            sed -i -e \"s/WILDFLY_VERSION=[0-9.]\\+/WILDFLY_VERSION=${params.WILDFLY_VERSION}/g\" Dockerfile
            git diff --quiet
            """, returnStatus: true
        }
      }
    }
    stage('Update Silverpeas version') {
      steps {
        echo "Update Silverpeas to ${params.SILVERPEAS_VERSION}"
        script {
          modified += sh script: """
            sed -i -e "s/SILVERPEAS_VERSION=[0-9a-zA-Z.-]\\+/SILVERPEAS_VERSION=${params.SILVERPEAS_VERSION}/g" Dockerfile
            git diff --quiet
            """, returnStatus: true
        }
      }
    }
    stage('Push modifications') {
      environment {
        GIT_AUTH = credentials("${gitCredential}")
      }
      when {
        expression { modified >= 1 }
      }
      steps {
        echo "Update Silverpeas version to ${params.SILVERPEAS_VERSION}"
        sh "git commit -am \"Upgrade for Silverpeas ${params.SILVERPEAS_VERSION}\""
        sh '''
           git config --local credential.helper "!f() { echo username=\\${GIT_AUTH_USR}; echo password=\\$GIT_AUTH_PSW; }; f"
           git push origin HEAD:master
           '''
      }
    }
    stage('Build image') {
      steps {
        script {
          dockerImage = docker.build "${imageName}:${params.IMAGE_VERSION}"
        }
      }
    }
    stage('Register image') {
      steps{
        script {
          docker.withRegistry('', registryCredential ) {
              dockerImage.push()
          }
        }
      }
    }
    stage('Tag project') {
      environment {
        GIT_AUTH = credentials("${gitCredential}")
      }
      when {
        expression { params.IMAGE_VERSION != 'latest' }
      }
      steps {
        sh "git tag ${params.IMAGE_VERSION}"
        sh 'git push origin --tags"'
      }
    }
  }
  post {
    success {
      script {
        currentBuild.displayName = params.IMAGE_VERSION
      }
    }
    always {
      step([$class                  : 'Mailer',
            notifyEveryUnstableBuild: true,
            recipients              : "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org",
            sendToIndividuals       : true])
    }
  }
}