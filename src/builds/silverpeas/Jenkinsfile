node {
  catchError {
    def maven = 'Maven 3.3'
    def java = 'Java Oracle 8'
    def nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def version
    stage('Preparation') {
      def buildNumber = (new Date()).format('yyMMdd')
      echo "Prepare the build ${buildNumber} of Silverpeas..."
      deleteDir()
      sh "wget https://raw.githubusercontent.com/Silverpeas/Silverpeas-Core/master/pom.xml"
      def pom = readMavenPom()
      version = "${pom.properties['next.release']}-build${buildNumber}"
    }
    stage('Silverpeas Core') {
      echo "Build ${version} of Silverpeas Core..."
      withMaven(jdk: java, maven: maven) {
        // checkout the project
        deleteDir()
        git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: 'https://github.com/Silverpeas/Silverpeas-Core'

        buildMavenProject(version)
        runSonarAnalysis()
        deployMavenProject(nexusRepo)
      }
    }
    stage('Silverpeas Components') {
      echo "Build ${version} of Silverpeas Components..."
      withMaven(jdk: java, maven: maven) {
        // checkout the project
        deleteDir()
        git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: 'https://github.com/Silverpeas/Silverpeas-Components'

        buildMavenProject(version)
        runSonarAnalysis()
        deployMavenProject(nexusRepo)
      }
    }
    stage('Silverpeas Assembly') {
      echo "Build ${version} of Silverpeas Assembly..."
      withMaven(jdk: java, maven: maven) {
        // checkout the project
        deleteDir()
        git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: 'https://github.com/Silverpeas/Silverpeas-Assembly'

        def pom = readMavenPom()
        if (pom.properties['jackrabbit.version'].contains('SNAPSHOT')) {
          error ("The Jackrabbit JCA dependency must be a stable or a build version for this project to be deployed. Current version is ${pom.properties['jackrabbit.version']}")
        }
        if (pom.parent.version.contains('SNAPSHOT')) {
          error "The parent POM must be at a stable or a build version for this project to be deployed. Current version is ${pom.parent.version}"
        }
        buildAndDeployMavenProject(version)
      }
    }
    stage('Silverpeas Setup') {
      echo "Build ${version} of Silverpeas Setup..."
      deleteDir()
      git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: 'https://github.com/Silverpeas/Silverpeas-Setup'

      buildAndDeployGradleProject(version)
    }
    stage('Silverpeas Distribution') {
      echo "Build ${version} of Silverpeas Distribution..."
      withMaven(jdk: java, maven: maven) {
        deleteDir()
        git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: 'https://github.com/Silverpeas/Silverpeas-Distribution'

        buildAndDeployMavenProject(version)
      }
    }
    /*stage('Silverpeas Looks') {
      echo "Build ${version} of Silverpeas Looks..."
      withMaven(jdk: java, maven: maven) {
        deleteDir()
        git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: 'https://github.com/Silverpeas/Silverpeas-Looks'

        buildMavenProject(version)
        deployMavenProject(version)
      }
    }*/
    stage('Project Web Site') {
      echo "Publish the web site with the new build version ${version}..."
      deleteDir()
      git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: 'https://github.com/Silverpeas/Silverpeas-Project-Web-Site'
      sh """
sed -i -e "s/<installer_build_version>[0-9a-zA-Z.-]\\+/<installer_build_version>${version}/g" pom.xml
mvn clean site-deploy
"""
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org",
        sendToIndividuals: true])
}

def buildAndDeployGradleProject(version) {
  sh """
sed -i -e "s/version = '.\\+'/version = '${version}'/g" build.gradle
sed -i -e 's/repositories\\/releases/repositories\\/builds/g' build.gradle
./gradlew clean install publish
"""
}

def buildMavenProject(version) {
  def pom = readMavenPom()
  if (pom.parent != null && pom.parent.version.contains('SNAPSHOT')) {
    error "The parent POM must be at a stable or a build version for this project to be deployed. Current version is ${pom.parent.version}"
  }
  sh """
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean install -Pdeployment -Djava.awt.headless=true -Dcontext=ci
"""
}

def runSonarAnalysis() {
  withSonarQubeEnv {
    sh "mvn ${SONAR_MAVEN_GOAL} -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_HOST_URL}"
  }
}

def deployMavenProject(repo) {
  sh "mvn deploy -DaltDeploymentRepository=silverpeas::default::${repo} -Pdeployment -Djava.awt.headless=true -Dmaven.test.skip=true"
}

def buildAndDeployMavenProject(version) {
  sh """
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${version}
mvn clean deploy -DaltDeploymentRepository=silverpeas::default::${repo} -Pdeployment -Djava.awt.headless=true
"""
}

