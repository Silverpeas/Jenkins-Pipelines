/*
 * This pipeline requires the following build parameter to be set:
 * BRANCH: the name of the Git branch from which the project has to be fetched and built.
 */
node {
  catchError {
    def maven = 'Maven 3.3'
    def java = 'Java Oracle 8'
    def nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def version
    def parentVersion
    stage('Preparation') {
      def buildNumber = (new Date()).format('yyMMdd')
      echo "Prepare the build ${buildNumber} of Silverpeas..."
      deleteDir()
      sh "wget https://raw.githubusercontent.com/Silverpeas/Silverpeas-Core/master/pom.xml"
      def pom = readMavenPom()
      version = "${pom.properties['next.release']}-build${buildNumber}"
      copyArtifacts projectName: 'Silverpeas_Project_Definition_AutoDeploy',
          filter: 'org/silverpeas/silverpeas-project/*-build*/*.pom',
          flatten: true
      def files = findFiles glob: '*.pom'
      pom = readMavenPom file: files[0].path
      parentVersion = pom.version
    }
    stage('Build Silverpeas Core') {
      echo "Build ${version} of Silverpeas Core..."
      withMaven(jdk: java, maven: maven) {
        buildMavenProject project: 'Silverpeas-Core',
            version: version,
            parentVersion: parentVersion
        runSonarAnalysis()
      }
    }
    stage('Build Silverpeas Components') {
      echo "Build ${version} of Silverpeas Components..."
      withMaven(jdk: java, maven: maven) {
        buildMavenProject project: 'Silverpeas-Components',
            version: version,
            parentVersion: parentVersion
        runSonarAnalysis()
      }
    }
    stage('Build Silverpeas Assembly') {
      echo "Build ${version} of Silverpeas Assembly..."
      withMaven(jdk: java, maven: maven) {
        buildMavenProject project: 'Silverpeas-Assembly',
            version: version,
            parentVersion: parentVersion
      }
    }
    stage('Build Silverpeas Setup') {
      echo "Build ${version} of Silverpeas Setup..."
      buildGradleProject project: 'Silverpeas-Setup',
          version: version
    }
    stage('Build Silverpeas Distribution') {
      echo "Build ${version} of Silverpeas Distribution..."
      withMaven(jdk: java, maven: maven) {
        buildMavenProject project: 'Silverpeas-Distribution',
            version: version
      }
    }
    stage('Silverpeas Looks') {
      echo "Build ${version} of Silverpeas Looks..."
      withMaven(jdk: java, maven: maven) {
        buildMavenProject project: 'Silverpeas-Looks',
            version: version,
            parentVersion: parentVersion
      }
    }
    stage('Publish Project Web Site') {
      echo "Publish the web site with the new build version ${version}..."
      withMaven(jdk: java, maven: maven) {
        deleteDir()
        fetchFromGithub('Silverpeas-Project-Web-Site')
        sh """
sed -i -e "s/<installer_build_version>[0-9a-zA-Z.-]\\+/<installer_build_version>${version}/g" pom.xml
mvn clean site-deploy
"""
      }
    }
    stage('Deploy Build Version') {
      withMaven(jdk: java, maven: maven) {
        echo "Deploy Silverpeas Core ${version}..."
        deployMavenProject('Silverpeas-Core', nexusRepo)

        echo "Deploy Silverpeas Components ${version}..."
        deployMavenProject('Silverpeas-Components', nexusRepo)

        echo "Deploy Silverpeas Assembly ${version}..."
        deployMavenProject('Silverpeas-Assembly', nexusRepo)

        echo "Deploy Silverpeas Setup ${version}..."
        deployGradleProject('Silverpeas-Setup', nexusRepo)

        echo "Deploy Silverpeas Distribution ${version}..."
        deployMavenProject('Silverpeas-Distribution', nexusRepo)

        echo "Deploy Silverpeas Looks ${version}"
        deployMavenProject('Silverpeas-Looks', nexusRepo)
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org",
        sendToIndividuals: true])
}

def fetchFromGithub(project) {
  deleteDir()
  git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', poll: false, url: "https://github.com/Silverpeas/${project}"
  sh "git checkout ${params.BRANCH}"
}

def buildGradleProject(params) {
  fetchFromGithub(params.project)
  sh """
sed -i -e "s/version = '.\\+'/version = '${params.version}'/g" build.gradle
./gradlew clean test install
"""
  stash name: params.project, includes: '**/build.gradle, **/build/**/*'
}

def buildMavenProject(params) {
  fetchFromGithub(params.project)
  def pom = readMavenPom()
  if (pom.parent && params.parentVersion && pom.parent.version != params.parentVersion) {
    sh """
mvn -U versions:update-parent -DgenerateBackupPoms=false -DparentVersion=${params.parentVersion}
git commit -am "Update parent POM to version ${params.parentVersion}
"""
  }
  if (params.project == 'Silverpeas-Assembly') {
    if (pom.properties['jackrabbit.version'].contains('SNAPSHOT')) {
      error ("The Jackrabbit JCA dependency must be a stable or a build version for this project to be deployed. Current version is ${pom.properties['jackrabbit.version']}")
    }
    if (pom.parent.version.contains('SNAPSHOT')) {
      error "The parent POM must be at a stable or a build version for this project to be deployed. Current version is ${pom.parent.version}"
    }
  }

  sh """
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${params.version}
mvn clean install -Pdeployment -Djava.awt.headless=true -Dcontext=ci
"""
  stash name: params.project, includes: '**/pom.xml, **/target/**/*'
}

def runSonarAnalysis() {
  withSonarQubeEnv {
    sh "mvn ${SONAR_MAVEN_GOAL} -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_HOST_URL}"
  }
}

def deployGradleProject(project, repo) {
  fetchFromGithub(project)
  unstash name: project
  def target = fetchTargetRepo(repo)
  sh """
sed -i -e "s/repositories\\/releases/${target.replaceAll('/', '\\\\/')}/g" build.gradle
./gradlew publish
"""
}

def deployMavenProject(project, repo) {
  fetchFromGithub(project)
  unstash name: project
  sh "mvn deploy -DaltDeploymentRepository=silverpeas::default::${repo} -Pdeployment -Djava.awt.headless=true -Dmaven.test.skip=true"
}

@NonCPS
def fetchTargetRepo(nexusRepoUrl) {
  def matcher = nexusRepoUrl =~ /(repositories\/.+)/
  matcher ? matcher[0][1] : ''
}

