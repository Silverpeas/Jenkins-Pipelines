/*
 * This pipeline requires the following build parameter to be set:
 * BRANCH: the name of the Git branch from which the project has to be fetched and built.
 * IMAGE_VERSION: the version of the Docker image to use for running the job.
 * Optionally, the following build parameters can be set at true:
 * to skip the execution of tests: SKIP_TEST,
 * to skip the code quality analysis with SonarQube: SKIP_QUALITY
 */
node {
  catchError {
    def buildRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def releaseRepo = 'https://www.silverpeas.org/nexus/content/repositories/releases'
    def version
    def parentVersion
    def release
    def commits = [:]
    docker.image("silverpeas/silverbuild:${params.IMAGE_VERSION}").inside('-v $HOME/.m2/settings.xml:/home/silverbuild/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/home/silverbuild/.m2/settings-security.xml -v $HOME/.gitconfig:/home/silverbuild/.gitconfig -v $HOME/.ssh:/home/silverbuild/.ssh -v $HOME/.gnupg:/home/silverbuild/.gnupg') {
      stage('Prepare') {
        if (!params.BRANCH) {
          error "Please set the parameter BRANCH to indicate what branch of the projects to build!"
        }
        sh "rm -rf *"
        def buildNumber = (new Date()).format('yyMMdd')
        sh "curl -fsSL -o pom.xml https://raw.githubusercontent.com/Silverpeas/Silverpeas-Core/${params.BRANCH}/pom.xml"
        def pom = readMavenPom()
        release = pom.properties['next.release']
        version = "${release}-build${buildNumber}"
        if (params.BRANCH == 'master' && (pom.parent.version.contains('build') || pom.parent.version.contains('SNAPSHOT'))) {
          copyArtifacts projectName: 'Silverpeas_Project_Definition_AutoDeploy', flatten: true
          def parentBuild = readYaml file: 'build.yaml'
          def isReleased = sh returnStatus: true,
              script: "curl --output /dev/null --silent --head --fail -r 0-0 ${releaseRepo}/org/silverpeas/silverpeas-project/${parentBuild.release}/silverpeas-project-${parentBuild.release}.pom"
          parentVersion = isReleased == '0' ? parentBuild.release : parentBuild.version
        } else {
          parentVersion = pom.parent.version
        }
        echo "Parent version is ${parentVersion}"
        echo "Trigger build version ${version} of Silverpeas from ${params.BRANCH}..."
      }
      stage('Build Silverpeas Core') {
        fetchFromGithub 'Silverpeas-Core'
        buildMavenProject(project: 'Silverpeas-Core',
            version: version,
            parentVersion: parentVersion) {
          runSonarAnalysis(it)
        }
      }
      stage('Build Silverpeas Components') {
        fetchFromGithub 'Silverpeas-Components'
        buildMavenProject(project: 'Silverpeas-Components',
            version: version,
            parentVersion: parentVersion) {
          runSonarAnalysis(it)
        }
      }
      stage('Build Silverpeas Assembly') {
        fetchFromGithub 'Silverpeas-Assembly'
        buildMavenProject project: 'Silverpeas-Assembly',
            version: version,
            parentVersion: parentVersion
      }
      stage('Build Silverpeas Setup') {
        fetchFromGithub 'Silverpeas-Setup'
        buildGradleProject project: 'Silverpeas-Setup',
            version: version
      }
      stage('Build Silverpeas Distribution') {
        fetchFromGithub 'Silverpeas-Distribution'
        buildMavenProject project: 'Silverpeas-Distribution',
            version: version
      }
      stage('Build Silverpeas Looks') {
        fetchFromGithub 'Silverpeas-Looks'
        buildMavenProject(project: 'Silverpeas-Looks',
            version: version,
            parentVersion: parentVersion) {
          runSonarAnalysis(it)
        }
      }
      stage('Deploy Silverpeas Core') {
        deployMavenProject(project: 'Silverpeas-Core',
            repo: buildRepo,
            commits: commits)
      }
      stage('Deploy Silverpeas Components') {
        deployMavenProject(project: 'Silverpeas-Components',
            repo: buildRepo,
            commits: commits)
      }
      stage('Deploy Silverpeas Assembly') {
        deployMavenProject(project: 'Silverpeas-Assembly',
            repo: buildRepo,
            commits: commits)
      }
      stage('Deploy Silverpeas Setup') {
        deployGradleProject(project: 'Silverpeas-Setup',
            repo: buildRepo,
            commits: commits)
      }
      stage('Deploy Silverpeas Distribution') {
        deployMavenProject(project: 'Silverpeas-Distribution',
            repo: buildRepo,
            commits: commits)
      }
      stage('Deploy Silverpeas Looks') {
        deployMavenProject(project: 'Silverpeas-Looks',
            repo: buildRepo,
            commits: commits)
      }
      stage('Archive Build Version') {
        sh "mkdir -p target"
        final String artifact = 'target/build.yaml'
        writeYaml file: artifact, data: ['version': version,
                                         'parent': parentVersion,
                                         'release': release,
                                         'commits': commits,
                                         'tested': !params.SKIP_TEST]
        archiveArtifacts artifacts: artifact, fingerprint: true
        currentBuild.displayName = version
      }
      stage('Publish Project Web Site') {
        // publish the project web site only for the master branch
        if (params.BRANCH == 'master') {
          echo "Publish the web site with the new build version ${version}..."
          def project = 'Silverpeas-Project-Web-Site'
          fetchFromGithub(project)
          dir(project) {
            def status = sh script: """
sed -i -e "s/<installer_build_version>[0-9a-zA-Z.-]\\+/<installer_build_version>${version}/g" pom.xml
mvn clean site-deploy
""", returnStatus: true
            if (status != 0) {
              emailext(
                  subject: "Silverpeas Web Site publishing failure!",
                  body: """
I was unable to publish the Silverpeas Community Web Site to www.silverpeas.org!
Please, consult the console log of the build ${currentBuild.displayName} of ${currentBuild.projectName}
""",
                  to: 'miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org'
              )
            } else {
              sh """
git commit -am "Publish Silverpeas web site with ${version} as the latest build version of Silverpeas"
"""
              pushToGithub(project, params.BRANCH)
            }
          }
        } else {
          echo 'Not main development branch: nothing to publish.'
        }
      }
      stage('Publish Silverpeas Core Documentation') {
        if (params.BRANCH == 'master') {
          deployProjectDocumentation(project: 'Silverpeas-Core', repo: buildRepo)
        }
      }
      stage('Publish Silverpeas Components Documentation') {
        if (params.BRANCH == 'master') {
          deployProjectDocumentation(project: 'Silverpeas-Components', repo: buildRepo)
        }
      }
      stage('Publish Silverpeas Test Docker Image into DockerHub') {
        // publish a test image only for a build versions of the main development branch
        if (params.BRANCH == 'master') {
          echo "Generate a test Docker image of Silverpeas ${version}..."
          def project = 'docker-silverpeas-test'
          fetchFromGithub(project)
          dir(project) {
            sh """
sed -i -e "s/ARG SILVERPEAS_VERSION=.\\+/ARG SILVERPEAS_VERSION=${version}/g" Dockerfile
git commit -am "Update Dockerfile for Silverpeas ${version}"
"""
            pushToGithub(project, params.BRANCH)
          }
        } else {
          echo 'Not main development branch: nothing to publish.'
        }
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org, nicolas.eysseric@silverpeas.org",
        sendToIndividuals: true])
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: false,
        recipients: "nicolas.eysseric@silverpeas.org, david.lesimple@silverpeas.org, sebastien.vuillet@silverpeas.org",
        sendToIndividuals: true])
}

def fetchFromGithub(project) {
  dir (project) {
    git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', branch: params.BRANCH, poll: false, url: "https://github.com/Silverpeas/${project}"
  }
}

def pushToGithub(project, branch) {
  withCredentials([usernamePassword(credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59',
      usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
    sh "git push https://${USER}:${PASSWORD}@github.com/Silverpeas/${project} HEAD:${branch}"
  }
}

def buildGradleProject(args, postbuild = null) {
  dir(args.project) {
    sh """
sed -i -e "s/version = '.\\+'/version = '${args.version}'/g" build.gradle
./gradlew clean build publishToMavenLocal
"""
    //stash name: args.project, includes: '**/build.gradle, **/build/**/*'
    postbuild?.call()
  }
}

def buildMavenProject(args, postbuild = null) {
  dir(args.project) {
    def pom = readMavenPom()
    if (pom.parent) {
      if (!pom.parent.version.matches(/[0-9.]+/) && args.parentVersion && pom.parent.version != args.parentVersion) {
        sh """
mvn -U versions:update-parent -DgenerateBackupPoms=false -DparentVersion="[${args.parentVersion}]"
git commit -am "Update parent POM to version ${args.parentVersion}"
"""
        pushToGithub(args.project, params.BRANCH)
      } else if (pom.parent.version.contains('SNAPSHOT')) {
        error "The parent POM must be at a stable or a build version for this project to be deployed. Current version is ${pom.parent.version}"
      }
    }
    if (args.project == 'Silverpeas-Assembly' && pom.properties['jackrabbit.version'].contains('SNAPSHOT')) {
      error("The Jackrabbit JCA dependency must be a stable or a build version for this project to be deployed. Current version is ${pom.properties['jackrabbit.version']}")
    }
    sh """
sed -i -e "s/<silverpeas.version>[0-9a-zA-Z.-]\\+/<silverpeas.version>${args.version}/g" pom.xml
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${args.version}
"""
    if (args.version.startsWith('6.0')) {
      sh """
/usr/local/bin/ooserver start
mvn clean install -Pdeployment -Djava.awt.headless=true -Dcontext=ci -Dmaven.test.skip=true
/usr/local/bin/ooserver stop
"""
    } else {
      if (params.SKIP_TEST) {
        sh "mvn clean install -Pdeployment -Dmaven.test.skip=true -Djava.awt.headless=true -Dcontext=ci"
      } else if (args.version.startsWith('6.1') || args.version.startsWith('6.2'))  {
        sh "mvn clean install -Pdeployment -Pcoverage -Djava.awt.headless=true -Dcontext=ci"
      } else {
        sh """
/opt/wildfly-for-tests/wildfly-*.Final/bin/standalone.sh -c standalone-full.xml &> /dev/null &
mvn clean install -Pdeployment -Pcoverage -Djava.awt.headless=true -Dcontext=ci
/opt/wildfly-for-tests/wildfly-*.Final/bin/jboss-cli.sh --connect :shutdown
"""
      }
    }
    postbuild?.call(args.project)
  }
}

def runSonarAnalysis(project) {
  // run sonarqube analysis only for the master branch and only tests aren't skipped
  // for quality checking after some quality issues corrections, the dedicated sonarqube branch in
  // the Silverpeas code repository can be used
  if (params.BRANCH == 'master' && !params.SKIP_QUALITY) {
    withSonarQubeEnv {
      sh """
mvn ${SONAR_MAVEN_GOAL} -Dsonar.projectKey=Silverpeas_${project} \\
    -Dsonar.organization=silverpeas \\
    -Dsonar.host.url=${SONAR_HOST_URL} \\
    -Dsonar.login=${SONAR_AUTH_TOKEN}
"""
    }
    timeout(time: 10, unit: 'MINUTES') {
      // Just in case something goes wrong, pipeline will be killed after a timeout
      def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
      if (qg.status != 'OK' && qg.status != 'WARNING') {
        error "Pipeline aborted due to quality gate failure: ${qg.status}"
      }
    }
  }
}

def deployGradleProject(args) {
  dir(args.project) {
    final String target = fetchTargetRepo(args.repo)
    sh """
sed -i -e "s/repositories\\/releases/${target.replaceAll('/', '\\\\/')}/g" build.gradle
./gradlew publish
"""
    final String commit = sh script: 'git rev-parse HEAD', returnStdout: true
    args.commits[args.project] = commit.trim()
  }
}

def deployMavenProject(args) {
  dir(args.project) {
    sh "mvn deploy -DaltDeploymentRepository=silverpeas::default::${args.repo} -Pdeployment -Djava.awt.headless=true -Dmaven.test.skip=true"
    final String commit = sh script: 'git rev-parse HEAD', returnStdout: true
    args.commits[args.project] = commit.trim()
  }
}

def deployProjectDocumentation(args) {
  dir(args.project) {
    sh "mvn site-deploy -DaltDeploymentRepository=silverpeas::default::${args.repo} -Pdeployment -Djava.awt.headless=true -Dmaven.test.skip=true"
  }
}

@NonCPS
def fetchTargetRepo(nexusRepoUrl) {
  def matcher = nexusRepoUrl =~ /(repositories\/.+)/
  matcher ? matcher[0][1] : ''
}

