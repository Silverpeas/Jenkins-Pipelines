/*
 * This pipeline requires the following build parameter to be set:
 * BRANCH: the name of the Git branch from which the project has to be fetched and built.
 */
node {
  catchError {
    def nexusRepo = 'https://www.silverpeas.org/nexus/content/repositories/builds'
    def version
    def parentVersion
    docker.image("silverpeas/silverbuild:${params.IMAGE_VERSION}")
        .inside('-u root -v $HOME/.m2/settings.xml:/root/.m2/settings.xml -v $HOME/.m2/settings-security.xml:/root/.m2/settings-security.xml -v $HOME/.gitconfig:/root/.gitconfig -v $HOME/.ssh:/root/.ssh -v $HOME/.gnupg:/root/.gnupg') {
      stage('Preparation') {
        sh "rm -rf *"
        if (!params.BRANCH) {
          params.BRANCH = 'master'
        }
        def buildNumber = (new Date()).format('yyMMdd')
        sh "curl -fsSL -o pom.xml https://raw.githubusercontent.com/Silverpeas/Silverpeas-Core/${params.BRANCH}/pom.xml"
        def pom = readMavenPom()
        version = "${pom.properties['next.release']}-build${buildNumber}"
        if (params.BRANCH == 'master') {
          copyArtifacts projectName: 'Silverpeas_Project_Definition_AutoDeploy',
              flatten: true
          def files = findFiles glob: '*.pom'
          pom = readMavenPom file: files[0].path
          parentVersion = pom.version
        } else {
          parentVersion = pom.parent.version
        }
        echo "Parent version is ${parentVersion}"
        echo "Trigger build version ${version} of Silverpeas from ${params.BRANCH}..."
      }
      stage('Build Silverpeas Core') {
        echo "Build ${version} of Silverpeas Core..."
        buildMavenProject(project: 'Silverpeas-Core',
            version: version,
            parentVersion: parentVersion) {
          runSonarAnalysis(it)
        }
      }
      stage('Build Silverpeas Components') {
        echo "Build ${version} of Silverpeas Components..."
        buildMavenProject(project: 'Silverpeas-Components',
            version: version,
            parentVersion: parentVersion) {
          runSonarAnalysis(it)
        }
      }
      stage('Build Silverpeas Assembly') {
        echo "Build ${version} of Silverpeas Assembly..."
        buildMavenProject project: 'Silverpeas-Assembly',
            version: version,
            parentVersion: parentVersion
      }
      stage('Build Silverpeas Setup') {
        echo "Build ${version} of Silverpeas Setup..."
        buildGradleProject project: 'Silverpeas-Setup',
            version: version
      }
      stage('Build Silverpeas Distribution') {
        echo "Build ${version} of Silverpeas Distribution..."
        buildMavenProject project: 'Silverpeas-Distribution',
            version: version
      }
      stage('Silverpeas Looks') {
        echo "Build ${version} of Silverpeas Looks..."
        buildMavenProject(project: 'Silverpeas-Looks',
            version: version,
            parentVersion: parentVersion) {
          runSonarAnalysis(it)
        }
      }
      stage('Silverpeas Mobile') {
        echo "Build ${version} of Silverpeas Mobile..."
        buildMavenProject project: 'silverpeasmobile',
            version: version,
            parentVersion: parentVersion
      }
      stage('Deploy Build Version') {
        echo "Deploy Silverpeas Core ${version}..."
        deployMavenProject('Silverpeas-Core', nexusRepo)

        echo "Deploy Silverpeas Components ${version}..."
        deployMavenProject('Silverpeas-Components', nexusRepo)

        echo "Deploy Silverpeas Assembly ${version}..."
        deployMavenProject('Silverpeas-Assembly', nexusRepo)

        echo "Deploy Silverpeas Setup ${version}..."
        deployGradleProject('Silverpeas-Setup', nexusRepo)

        echo "Deploy Silverpeas Distribution ${version}..."
        deployMavenProject('Silverpeas-Distribution', nexusRepo)

        echo "Deploy Silverpeas Looks ${version}"
        deployMavenProject('Silverpeas-Looks', nexusRepo)

        echo "Deploy Silverpeas Mobile ${version}"
        deployMavenProject('silverpeasmobile', nexusRepo)
      }
      stage('Archive Build Version') {
        dir('Silverpeas-Core') {
          sh """
echo "parent: ${parentVersion}" > target/build.yaml
echo "version: ${version}" >> target/build.yaml
"""
          archiveArtifacts artifacts: 'target/build.yaml', fingerprint: true
        }
      }
      stage('Publish Project Web Site') {
        // publish the project web site only for the master branch
        if (params.BRANCH == 'master') {
          echo "Publish the web site with the new build version ${version}..."
          fetchFromGithub('Silverpeas-Project-Web-Site')
          sh """
sed -i -e "s/<installer_build_version>[0-9a-zA-Z.-]\\+/<installer_build_version>${version}/g" pom.xml
mvn clean site-deploy
"""
        }
      }
    }
  }
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: "miguel.moquillon@silverpeas.org, yohann.chastagnier@silverpeas.org, nicolas.eysseric@silverpeas.org",
        sendToIndividuals: true])
  step([$class: 'Mailer',
        notifyEveryUnstableBuild: false,
        recipients: "nicolas.eysseric@silverpeas.org, david.lesimple@silverpeas.org, sebastien.vuillet@silverpeas.org",
        sendToIndividuals: true])
}

def fetchFromGithub(project) {
  git credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59', branch: params.BRANCH, poll: false, url: "https://github.com/Silverpeas/${project}"
}

def pushToGithub(project, branch) {
  withCredentials([usernamePassword(credentialsId: 'cacc0467-7c85-41d1-bf4e-eaa470dd5e59',
      usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
    sh "git push https://${USER}:${PASSWORD}@github.com/Silverpeas/${project} HEAD:${branch}"
  }
}

def buildGradleProject(args, postbuild = null) {
  dir(args.project) {
    fetchFromGithub(args.project)
    sh """
sed -i -e "s/version = '.\\+'/version = '${args.version}'/g" build.gradle
./gradlew clean test install
"""
    //stash name: args.project, includes: '**/build.gradle, **/build/**/*'
    postbuild?.call()
  }
}

def buildMavenProject(args, postbuild = null) {
  dir(args.project) {
    fetchFromGithub(args.project)
    def pom = readMavenPom()
    if (pom.parent) {
      if (!pom.parent.version.matches(/[0-9.]+/) && args.parentVersion && pom.parent.version != args.parentVersion) {
        sh """
mvn -U versions:update-parent -DgenerateBackupPoms=false -DparentVersion=${args.parentVersion}
git commit -am "Update parent POM to version ${args.parentVersion}"
"""
        pushToGithub(args.project, params.BRANCH)
      } else if (pom.parent.version.contains('SNAPSHOT')) {
        error "The parent POM must be at a stable or a build version for this project to be deployed. Current version is ${pom.parent.version}"
      }
    }
    if (args.project == 'Silverpeas-Assembly' && pom.properties['jackrabbit.version'].contains('SNAPSHOT')) {
      error("The Jackrabbit JCA dependency must be a stable or a build version for this project to be deployed. Current version is ${pom.properties['jackrabbit.version']}")
    }
    sh """
sed -i -e "s/<silverpeas.version>[0-9a-zA-Z.-]\\+/<silverpeas.version>${args.version}/g" pom.xml
mvn -U versions:set -DgenerateBackupPoms=false -DnewVersion=${args.version}
"""
    if (args.version.startsWith('6.0')) {
      sh """
/usr/local/bin/ooserver start
mvn clean install -Pdeployment -Djava.awt.headless=true -Dcontext=ci -Dmaven.test.skip=true
/usr/local/bin/ooserver stop
"""
    } else {
      sh "mvn clean install -Pdeployment -Djava.awt.headless=true -Dcontext=ci"
    }
    postbuild?.call(args.project)
  }
}

def runSonarAnalysis(project) {
  // run sonarqube analysis only for the master branch
  if (params.BRANCH == 'master') {
    withSonarQubeEnv {
      sh """
mvn ${SONAR_MAVEN_GOAL} -Dsonar.projectKey=Silverpeas_${project} \\
    -Dsonar.organization=silverpeas \\
    -Dsonar.host.url=${SONAR_HOST_URL} \\
    -Dsonar.login=${SONAR_AUTH_TOKEN}
"""
    }
    timeout(time: 10, unit: 'MINUTES') {
      // Just in case something goes wrong, pipeline will be killed after a timeout
      def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
      if (qg.status != 'OK' && qg.status != 'WARNING') {
        error "Pipeline aborted due to quality gate failure: ${qg.status}"
      }
    }
  }
}

def deployGradleProject(project, repo) {
  dir(project) {
    def target = fetchTargetRepo(repo)
    sh """
sed -i -e "s/repositories\\/releases/${target.replaceAll('/', '\\\\/')}/g" build.gradle
./gradlew publish
"""
  }
}

def deployMavenProject(project, repo) {
  dir(project) {
    sh "mvn deploy -DaltDeploymentRepository=silverpeas::default::${repo} -Pdeployment -Djava.awt.headless=true -Dmaven.test.skip=true"
  }
}

@NonCPS
def fetchTargetRepo(nexusRepoUrl) {
  def matcher = nexusRepoUrl =~ /(repositories\/.+)/
  matcher ? matcher[0][1] : ''
}

